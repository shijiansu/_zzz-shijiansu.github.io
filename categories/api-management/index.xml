<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shijian Homepage – API Management</title><link>/categories/api-management/</link><description>Recent content in API Management on Shijian Homepage</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 16 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/api-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Topics: Practical advice for designing REST APIs</title><link>/topics/api-management/design-restful-api/practical-advice-for-designing-rest-apis/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>/topics/api-management/design-restful-api/practical-advice-for-designing-rest-apis/</guid><description>
&lt;h2 id="first-some-terminology">First, Some Terminology&lt;/h2>
&lt;p>Any API design follows something called &lt;code>Resource Oriented Design&lt;/code> It consists of three key concepts&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Resource:&lt;/strong> A resource is a piece of data, For example, &lt;strong>a User&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Collection:&lt;/strong> A group of resources is called a collection. Example: &lt;strong>A list of users&lt;/strong>&lt;/li>
&lt;li>&lt;strong>URL:&lt;/strong> Identifies the location of resource or collection. Example: &lt;code>/user&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="1-use-kebab-case-for-urls">1. Use kebab-case for URLs&lt;/h2>
&lt;p>For example, if you want to get the list of orders.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>/systemOrders or /system_orders&lt;/code>&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>/system-orders&lt;/code>&lt;/p>
&lt;h2 id="2-use-camelcase-for-parameters">2. Use camelCase for Parameters&lt;/h2>
&lt;p>For example, if you want to get products from a particular shop.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>/system-orders/{order_id} or /system-orders/{OrderId}&lt;/code>&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>/system-orders/{orderId}&lt;/code>&lt;/p>
&lt;h2 id="3-plural-name-to-point-to-a-collection">3. Plural Name to Point to a Collection&lt;/h2>
&lt;p>If you want to get all the users of a system.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>GET /user or GET /User&lt;/code>&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>GET /users&lt;/code>&lt;/p>
&lt;h2 id="4-url-starts-with-a-collection-and-ends-with-an-identifier">4. URL Starts With a Collection and Ends With an Identifier&lt;/h2>
&lt;p>If want to keep the concept singular and consistent.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>GET /shops/:shopId/category/:categoryId/price&lt;/code>&lt;/p>
&lt;p>This is bad because it’s pointing to a property instead of a resource.&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>GET /shops/:shopId/ or GET /category/:categoryId&lt;/code>&lt;/p>
&lt;h2 id="5-keep-verbs-out-of-your-resource-url">5. Keep Verbs Out of Your Resource URL&lt;/h2>
&lt;p>Don’t use verbs to express your intention in the URL. Instead, use proper HTTP methods to describe the operation.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>POST /updateuser/{userId} or GET /getusers&lt;/code>&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>PUT /user/{userId}&lt;/code>&lt;/p>
&lt;h2 id="6-use-verbs-for-non-resource-url">6. Use Verbs for Non-Resource URL&lt;/h2>
&lt;p>You have an endpoint that returns nothing but an operation. In this case, you can use verbs. For example, if you want to resend the alert to a user.&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>POST /alerts/245743/resend&lt;/code>&lt;/p>
&lt;p>Keep in mind that these are not our CRUD operations. Rather, these are considered functions that do a specific job in our system.&lt;/p>
&lt;h2 id="7-use-camelcase-for-json-property">7. Use camelCase for JSON property&lt;/h2>
&lt;p>If you’re building a system in which the request body or response is JSON, the property names should be in &lt;code>camelCase&lt;/code>&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
user_name: &amp;#34;Mohammad Faisal&amp;#34;
user_id: &amp;#34;1&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Good:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
userName: &amp;#34;Mohammad Faisal&amp;#34;
userId: &amp;#34;1&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-monitoring">8. Monitoring&lt;/h2>
&lt;p>RESTful HTTP services MUST implement the &lt;code>/health&lt;/code> and &lt;code>/version&lt;/code> and &lt;code>/metrics&lt;/code> API endpoints. They will provide the following info.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>/health&lt;/strong>: Respond to requests to &lt;code>/health&lt;/code> with a &lt;code>200 OK&lt;/code> status code.&lt;/li>
&lt;li>&lt;strong>/version&lt;/strong>: Respond to request to &lt;code>/version&lt;/code> with the version number.&lt;/li>
&lt;li>&lt;strong>/metrics&lt;/strong>: This endpoint will provide various metrics like average response time.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/debug&lt;/code> and &lt;code>/status&lt;/code> endpoints are also highly recommended.&lt;/p>
&lt;h2 id="9-dont-use-table_name-for-the-resource-name">9. Don’t Use table_name for the Resource Name&lt;/h2>
&lt;p>Don’t just use the table name as your resource name. In the long run, this kind of laziness can be harmful.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>product_order&lt;/code>&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>product-orders&lt;/code>&lt;/p>
&lt;p>This is because exposing the underlying architecture is not your purpose.&lt;/p>
&lt;h2 id="10-use-api-design-tools">10. Use API Design Tools&lt;/h2>
&lt;p>There are many good API design tools for good documentation, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://apiblueprint.org/">API Blueprint&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swagger.io/">Swagger&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Having good and detailed documentation results in a great user experience for your API consumers.&lt;/p>
&lt;h2 id="11-use-simple-ordinal-number-as-version">11. Use Simple Ordinal Number as Version&lt;/h2>
&lt;p>Always use versioning for the API and move it all the way to the left so that it has the highest scope. The version number should be &lt;code>v1&lt;/code>, &lt;code>v2&lt;/code> etc.&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>http://api.domain.com/v1/shops/3/products&lt;/code>&lt;/p>
&lt;p>Always use versioning in your API because if the API is being used by external entities, changing the endpoint can break their functionality.&lt;/p>
&lt;h2 id="12-include-total-number-of-resources-in-your-response">12. Include Total Number of Resources in Your Response&lt;/h2>
&lt;p>If an API returns a list of objects always include the total number of resources in the response. You can use the &lt;code>total&lt;/code> property for this.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
users: [
...
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Good:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
users: [
...
], total: 34
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="13-accept-limit-and-offset-parameters">13. Accept limit and offset Parameters&lt;/h2>
&lt;p>Always accept &lt;code>limit&lt;/code> and &lt;code>offset&lt;/code> parameters in &lt;code>GET&lt;/code> operations.&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong> &lt;code>GET /shops?offset=5&amp;amp;limit=5&lt;/code>&lt;/p>
&lt;p>This is because it’s necessary for pagination on the front end.&lt;/p>
&lt;h2 id="14-take-fields-query-parameter">14. Take fields Query Parameter&lt;/h2>
&lt;p>The amount of data being returned should also be taken into consideration. Add a &lt;code>fields&lt;/code> parameter to expose only the required fields from your API.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Only return the name, address, and contact of the shops.&lt;/p>
&lt;p>&lt;code>GET /shops?fields=id,name,address,contact&lt;/code>&lt;/p>
&lt;p>It also helps to reduce the response size in some cases.&lt;/p>
&lt;h2 id="15-dont-pass-authentication-tokens-in-url">15. Don’t Pass Authentication Tokens in URL&lt;/h2>
&lt;p>This is a very bad practice because often URLs are logged and the authentication token will also be logged unnecessarily.&lt;/p>
&lt;p>&lt;strong>Bad:&lt;/strong> &lt;code>GET /shops/123?token=some_kind_of_authenticaiton_token&lt;/code>&lt;/p>
&lt;p>&lt;strong>Good:&lt;/strong>&lt;/p>
&lt;p>Instead, pass them with the header:&lt;/p>
&lt;p>&lt;code>Authorization: Bearer xxxxxx, Extra yyyyy&lt;/code>&lt;/p>
&lt;p>Also, authorization tokens should be short-lived&lt;/p>
&lt;h2 id="16-validate-the-content-type">16. Validate the Content-Type&lt;/h2>
&lt;p>The server should not assume the content type. For example, if you accept &lt;code>application/x-www-form-urlencoded&lt;/code> then an attacker can create a form and trigger a simple POST request.&lt;/p>
&lt;p>So, always validate the &lt;code>content-type&lt;/code> and if you want to go with a default one use &lt;code>content-type: application/json&lt;/code>&lt;/p>
&lt;h2 id="17-use-http-methods-for-crud-functions">17. Use HTTP Methods for CRUD Functions&lt;/h2>
&lt;p>HTTP methods serve the purpose of explaining CRUD functionality.&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET&lt;/code>: To retrieve a representation of a resource.&lt;/li>
&lt;li>&lt;code>POST&lt;/code>: To create new resources and sub-resources.&lt;/li>
&lt;li>&lt;code>PUT&lt;/code>: To update existing resources.&lt;/li>
&lt;li>&lt;code>PATCH&lt;/code>: To update existing resources. It only updates the fields that were supplied, leaving the others alone&lt;/li>
&lt;li>&lt;code>DELETE&lt;/code>: To delete existing resources.&lt;/li>
&lt;/ul>
&lt;h2 id="18-use-the-relation-in-the-url-for-nested-resources">18. Use the Relation in the URL For Nested Resources&lt;/h2>
&lt;p>Some practical examples are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET /shops/2/products&lt;/code> : Get the list of all products from shop 2.&lt;/li>
&lt;li>&lt;code>GET /shops/2/products/31&lt;/code>: Get the details of product 31, which belongs to shop 2.&lt;/li>
&lt;li>&lt;code>DELETE /shops/2/products/31&lt;/code> , should delete product 31, which belongs to shop 2.&lt;/li>
&lt;li>&lt;code>PUT /shops/2/products/31&lt;/code> , should update the info of product 31, Use PUT on resource-URL only, not the collection.&lt;/li>
&lt;li>&lt;code>POST /shops&lt;/code> , should create a new shop and return the details of the new shop created. Use POST on collection-URLs.&lt;/li>
&lt;/ul>
&lt;h2 id="19-cors">19. CORS&lt;/h2>
&lt;p>Do support CORS (Cross-Origin Resource Sharing) headers for all public-facing APIs.&lt;/p>
&lt;p>Consider supporting a CORS allowed origin of “*”, and enforcing authorization through valid OAuth tokens.&lt;/p>
&lt;p>Avoid combining user credentials with origin validation.&lt;/p>
&lt;h2 id="20-security">20. Security&lt;/h2>
&lt;p>Enforce HTTPS (TLS-encrypted) across all endpoints, resources, and services.&lt;/p>
&lt;p>Enforce and require HTTPS for all callback URLs, push notification endpoints, and webhooks.&lt;/p>
&lt;h2 id="21-errors">21. Errors&lt;/h2>
&lt;p>Errors, or more specifically service errors, occur when a client makes an invalid or incorrect request to a service or passes invalid or incorrect data to a service, and the service rejects the request.&lt;/p>
&lt;p>Examples include invalid authentication credentials, incorrect parameters, unknown version IDs, etc.&lt;/p>
&lt;ul>
&lt;li>Do return &lt;code>4xx&lt;/code> HTTP error codes when rejecting a client request due to one or more Service Errors.&lt;/li>
&lt;li>Consider processing all attributes and then returning multiple validation problems in a single response.&lt;/li>
&lt;/ul>
&lt;h2 id="22-golden-rules">22. Golden Rules&lt;/h2>
&lt;p>If you are ever in doubt about an API formatting decision, these golden rules can help guide us to making the right decision.&lt;/p>
&lt;ul>
&lt;li>Flat is better than nested.&lt;/li>
&lt;li>Simple is better than complex.&lt;/li>
&lt;li>Strings are better than numbers.&lt;/li>
&lt;li>Consistency is better than customization.&lt;/li>
&lt;/ul></description></item><item><title>Topics: Introduction to API Versioning Best Practices</title><link>/topics/api-management/api-versioning/introduction-to-api-versioning-best-practices/</link><pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate><guid>/topics/api-management/api-versioning/introduction-to-api-versioning-best-practices/</guid><description>
&lt;p>Change is inevitable and growth is a good thing. When your API has reached the point of expanding beyond it’s original intent and capacity, it’s time to consider the next &lt;strong>version&lt;/strong>.&lt;/p>
&lt;p>Whether that next iteration is a whole number version bump or just a feature expansion, it’s important to consider the pros and cons of how you let your developers know about it. Far different than traditional software versioning, &lt;strong>API versioning&lt;/strong> can have complex implications for the products using it downstream.&lt;/p>
&lt;p>The big version bumps usually indicate a significant &lt;strong>milestone&lt;/strong> in the codebase of the API. It declares a &lt;strong>significant change&lt;/strong> in the requirements of API consumption and implementation. Feature additions that don’t necessarily change existing calls is part of the organic growth of a product and aren’t subject to the same considerations.&lt;/p>
&lt;p>Once you start taking things away, or dramatically changing what’s in place, it’s time to consider another version. Often, these new versions become whole new products. Although they share a common ancestry, new versions of legacy APIs require careful thought into their implementation.&lt;/p>
&lt;blockquote>
&lt;p>For more advanced API versioning insights, read &lt;a href="https://nordicapis.com/api-change-strategy/">API Change Strategy&lt;/a> or &lt;a href="https://nordicapis.com/whats-the-difference-between-versioning-and-revisioning-apis/">What’s The Difference Between Versioning and Revisioning APIs?&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="traditional-api-versioning-n1">Traditional API Versioning: n+1&lt;/h2>
&lt;p>Service changes that can warrant a new version include: removing an operation, renaming an operation, operation parameter changes that shift data types or order, and complex structural changes of data type.&lt;/p>
&lt;p>A version increment can also indicate significant changes to API consumption requirements. It can also advertise a radical change in the underlying resources offered by the API. In either case, products and platforms that rely on an API for core functionality may need a &lt;strong>code refactor&lt;/strong> to adapt.&lt;/p>
&lt;p>That can be time and resource intensive, so a sane and &lt;strong>well documented&lt;/strong> approach to URI versioning is crucial for multiple stakeholders. Versioning can be a controversial topic within teams, and often the first question is whether to even use it.&lt;/p>
&lt;h2 id="one-uri-to-rule-them-all">One URI to Rule Them All&lt;/h2>
&lt;p>One school of thought is to focus on &lt;strong>one unchanging URI&lt;/strong> with just one set of criteria for consumption. If the API structure is changed, resources altered, or parameter set modified, then the product is re-launched with the same URI. This pushes the obligation to refactor code to downstream developers.&lt;/p>
&lt;p>Tim Berners-Lee gets name dropped by proponents of this approach. He is often &lt;a href="https://www.technologyreview.com/s/403095/sir-tim-berners-lee/">quoted as saying&lt;/a> “a cool URI is one which does not change.” In context, that quote was intended to address the nascent internet which depended on hyperlinks within web pages to endure. The &lt;a href="http://nordicapis.com/what-is-json-ld/">connected web&lt;/a>, at that time, was a series of information nodes.&lt;/p>
&lt;p>The world has changed, though, and we work with a interconnected matrix of powerful and resource heavy web services. Once services became widespread, early approaches were similar to software version numbers. But, standalone software has very different downstream implications than interdependent web services.&lt;/p>
&lt;p>IBM addresses this in their own “&lt;a href="https://www.ibm.com/developerworks/webservices/library/ws-version/">Best practices for Web services&lt;/a>“:&lt;/p>
&lt;blockquote>
&lt;p>“The correct handling of API versioning has been one of the most difficult issues faced by developers of distributed systems. Various schemes have been proposed, ranging from the laissez faire approach taken by CORBA (Common Object Request Broker Architecture) to the stricter schemes used in DCOM (Distributed Component Object Model). With the advent of Web services, there are some new features that you can take advantage of that can help alleviate the problem, but the brutal fact of the matter is that versioning has not been built into the Web services architecture.”&lt;/p>
&lt;/blockquote>
&lt;p>What constitutes “best practices” has evolved over time and is determined by provider choices for their own products, not necessarily from any outside governing body. So, when it comes to choosing an approach to versioning, there are a wide variety of practices.&lt;/p>
&lt;h2 id="on-backwards-compatibility">On Backwards Compatibility&lt;/h2>
&lt;p>Another consideration is &lt;strong>backwards compatibility&lt;/strong>. For many providers of web resource APIs, this is the primary consideration. Maintaining multiple versions of a resource intensive API can be a serious drain on the time and focus of engineering teams. It can also introduce long term stability problems to services that have moved on to more modern architectures.&lt;/p>
&lt;p>For many, introducing a new version that substantially changes an API is, in fact, launching a &lt;strong>whole new service.&lt;/strong> Treating it as a &lt;strong>new product&lt;/strong>, with &lt;strong>new documentation&lt;/strong>, Service Level Agreements, tier access changes, etc., can have major business implications. Many a whiteboard has been filled with figures debating whether a change is an engineering choice or a &lt;em>business shift&lt;/em>.&lt;/p>
&lt;p>Once the decision has been made to introduce a new version, it’s helpful to look around at established providers for battle tested solutions.&lt;/p>
&lt;blockquote>
&lt;p>Related: &lt;a href="https://nordicapis.com/api-lifecycle-retirement-stage-a-history-of-major-public-api-retirements/">The 5 Main Business Reasons for API Retirement&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="examples-of-versioning-in-the-wild">Examples of Versioning in the Wild&lt;/h2>
&lt;p>What can we learn from the versioning practices of established web API providers? &lt;a href="https://cloud.google.com/apis/design/versioning">Google&lt;/a> comes out of the gate with a blunt affirmation of numbered versioning: “Networked APIs should use &lt;strong>Semantic Versioning&lt;/strong>.” Not much wiggle room there. They also have a similarly plain system. Version indicators use the form &lt;strong>v.MAJOR.MINOR.PATCH&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="https://www.twilio.com/docs/api/rest">Twilio&lt;/a> uses a &lt;strong>timestamp&lt;/strong> in the URL, instead of a version number. &lt;a href="https://developer.salesforce.com/blogs/developer-relations/2013/10/api-versions-and-the-salesforce-metadata-api.html">Salesforce&lt;/a> opts for vXX.X in the &lt;strong>middle&lt;/strong> of the URL. &lt;a href="https://developers.facebook.com/docs/apps/versions">Facebook&lt;/a> goes for prepending the version to the endpoint path. The version is actually optional, with unspecified version requests being routed to the oldest version available.&lt;/p>
&lt;p>Note that the granularity offered by vX.X is usually intended for development and not necessarily for production. Check the docs first, but it’s a good idea to opt for ordinal number references in production code.&lt;/p>
&lt;p>&lt;a href="http://nordicapis.com/avoid-walking-on-eggshells-and-use-devops/">DevOps&lt;/a> folks may be familiar with the &lt;strong>UDDI&lt;/strong> and &lt;strong>WDSL&lt;/strong> approach to version definitions. HTTP solutions are much more popular, but there is support for this kind of approach. It entails a version request through an &lt;strong>XML&lt;/strong> exchange to get the proper version.&lt;/p>
&lt;p>Megalithic companies like Microsoft, IBM, and Oracle have references to this method in some of their documentation. Although, HTTP version indications are accepted in many divisions and products.&lt;/p>
&lt;p>Dating network &lt;strong>Badoo&lt;/strong> opts for &lt;a href="https://nordicapis.com/continuous-versioning-strategy-for-internal-apis/">continuous versioning&lt;/a>, where features are added and endpoints stay the same. Legacy clients can use old fields and new clients use added fields. API requests are transactional, with a feature request call made and a list of available options returned. Feature checks can serve as a sort of state request.&lt;/p>
&lt;p>The &lt;a href="http://apistylebook.com/design/topics/versioning">API stylebook&lt;/a> has a few more paths to explore on versioning. Without a codified set of specifications, companies continue to explore different options.&lt;/p>
&lt;h2 id="version-with-accept-header">Version With Accept Header&lt;/h2>
&lt;p>A common alternative to path parameters is &lt;strong>header exchanges&lt;/strong>. They can be more verbose about the expected response and are usually included anyway for an HTTP request. Having a resource specific header approach allows for other parameters (such as caching, compression, and &lt;a href="http://nordicapis.com/content-negotiation/">content negotiation&lt;/a>) to be included.&lt;/p>
&lt;p>API providers often communicate &lt;strong>resource criteria&lt;/strong> and limitations in their response, so developers will need to examine the header exchange anyway. Besides just response codes, common header responses include &lt;a href="http://nordicapis.com/stemming-the-flood-how-to-rate-limit-an-api/">rate limit bounds&lt;/a>, &lt;a href="http://nordicapis.com/best-practices-api-error-handling/">specific error messages&lt;/a>, time-based data, and more.&lt;/p>
&lt;p>A clever outlier is using &lt;strong>MIME&lt;/strong> types to include a version indicator. API providers register these MIME types on their backend and then users include &lt;strong>Accept&lt;/strong> and &lt;strong>Content-type headers&lt;/strong>. IETF legitimized this approach in &lt;a href="http://www.ietf.org/rfc/rfc4627.txt">RFC4627&lt;/a>. While this does work, developers choosing this approach will inevitably end up explaining their choice to management types who state, “but it doesn’t work on HTML forms, so why do you want to do it that way?”&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">Accept&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">application&lt;/span>/&lt;span style="color:#000">pre&lt;/span>.&lt;span style="color:#000">company&lt;/span>.&lt;span style="color:#000">app&lt;/span>-&lt;span style="color:#000">v&lt;/span>1+&lt;span style="color:#000">json&lt;/span>
&lt;span style="color:#000">Content-Type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">application&lt;/span>/&lt;span style="color:#000">pre&lt;/span>.&lt;span style="color:#000">company&lt;/span>.&lt;span style="color:#000">app&lt;/span>-&lt;span style="color:#000">v&lt;/span>1+&lt;span style="color:#000">json&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The debate over implementation is deep and will continue. So, developers and providers will have to make choices based on their specific needs. In general, the most common approach is a combination of &lt;strong>URI parameters&lt;/strong> and &lt;strong>header criteria&lt;/strong>. APIs accept URI requests with parameters and then return a payload with proper response codes and (hopefully) verbose &lt;strong>metadata&lt;/strong> in the header of the response.&lt;/p>
&lt;p>What constitutes a proper response code is something engineers will debate gleefully and loudly at company happy hours. But, here are some useful negative responses that are verbose enough to be helpful downstream.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="color:#000">400&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">BAD_REQUEST&lt;/span>: &lt;span style="color:#000">ApiVersionUnspecified&lt;/span>: &lt;span style="color:#000">An&lt;/span> &lt;span style="color:#000">API&lt;/span> &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">required&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">but&lt;/span> &lt;span style="color:#000">was&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#000">specified&lt;/span>
&lt;span style="color:#000">400&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">BAD_REQUEST&lt;/span>: &lt;span style="color:#000">InvalidApiVersion&lt;/span>: &lt;span style="color:#000">An&lt;/span> &lt;span style="color:#000">API&lt;/span> &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#000">was&lt;/span> &lt;span style="color:#000">specified&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">but&lt;/span> &lt;span style="color:#000">it&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">invalid&lt;/span>
&lt;span style="color:#000">400&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">BAD_REQUEST&lt;/span>: &lt;span style="color:#000">AmbiguousApiVersion&lt;/span>: &lt;span style="color:#000">An&lt;/span> &lt;span style="color:#000">API&lt;/span> &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#000">was&lt;/span> &lt;span style="color:#000">specified&lt;/span> &lt;span style="color:#000">multiple&lt;/span> &lt;span style="color:#000">times&lt;/span> &lt;span style="color:#000">with&lt;/span> &lt;span style="color:#000">different&lt;/span> &lt;span style="color:#000">values&lt;/span>
&lt;span style="color:#000">400, 405&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">BAD_REQUEST&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">METHOD_NOT_ALLOWED&lt;/span>: &lt;span style="color:#000">UnsupportedApiVersion&lt;/span>: &lt;span style="color:#000">The&lt;/span> &lt;span style="color:#000">specified&lt;/span> &lt;span style="color:#000">API&lt;/span> &lt;span style="color:#000">version&lt;/span> &lt;span style="color:#000">is&lt;/span> &lt;span style="color:#000">not&lt;/span> &lt;span style="color:#000">supported&lt;/span>
&lt;span style="color:#000">301&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">MOVED_PERMANENTLY&lt;/span>: &lt;span style="color:#000">movedPermanently&lt;/span>: &lt;span style="color:#000">This&lt;/span> &lt;span style="color:#000">request&lt;/span> &lt;span style="color:#000">and&lt;/span> &lt;span style="color:#000">future&lt;/span> &lt;span style="color:#000">requests&lt;/span> &lt;span style="color:#000">for&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">same&lt;/span> &lt;span style="color:#000">operation&lt;/span> &lt;span style="color:#000">have&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">be&lt;/span> &lt;span style="color:#000">sent&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">URL&lt;/span> &lt;span style="color:#000">specified&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">Location&lt;/span> &lt;span style="color:#000">header&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">this&lt;/span> &lt;span style="color:#000">response&lt;/span> &lt;span style="color:#000">instead&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">URL&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">which&lt;/span> &lt;span style="color:#000">this&lt;/span> &lt;span style="color:#000">request&lt;/span> &lt;span style="color:#000">was&lt;/span> &lt;span style="color:#000">sent&lt;/span>
&lt;span style="color:#000">410&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">GONE&lt;/span>: &lt;span style="color:#000">deleted&lt;/span>: &lt;span style="color:#000">The&lt;/span> &lt;span style="color:#000">request&lt;/span> &lt;span style="color:#000">failed&lt;/span> &lt;span style="color:#000">because&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">resource&lt;/span> &lt;span style="color:#000">associated&lt;/span> &lt;span style="color:#000">with&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">request&lt;/span> &lt;span style="color:#000">has&lt;/span> &lt;span style="color:#000">been&lt;/span> &lt;span style="color:#000">deleted&lt;/span>
&lt;span style="color:#000">299&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">OK&lt;/span>: &lt;span style="color:#000">Warning&lt;/span>: &amp;#34;&lt;span style="color:#000">Deprecated&lt;/span> &lt;span style="color:#000">API&lt;/span>&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For More on Error Responses read: &lt;a href="https://nordicapis.com/best-practices-api-error-handling/">Best Practices for API Error Handling&lt;/a>&lt;/p>
&lt;h2 id="business-motives-will-direct-versioning-choices">Business Motives Will Direct Versioning Choices&lt;/h2>
&lt;p>In some ways, the technical aspects of versioning are the easiest to work out. The real debate comes down to product needs, &lt;strong>business concerns&lt;/strong>, and future plans. The requirements for supporting multiple versions of an API can be very high in terms of engineering support, backend resources, and simple bandwidth.&lt;/p>
&lt;p>Also, to be done well, a new version needs &lt;strong>rich documentation&lt;/strong> to successfully transition. Since up-to-date documentation is often low on the priorities of fast moving companies, it can end up getting launched poorly as a mashup of old documentation and new. Bad documentation can yield deep costs in time and money.&lt;/p>
&lt;p>The main takeaway here is that versioning is a &lt;strong>multi-faceted&lt;/strong> conversation. It’s not just a technical problem. The downstream effects and legacy costs can be substantial and the entire process should be well thought out for effective growth.&lt;/p></description></item></channel></rss>