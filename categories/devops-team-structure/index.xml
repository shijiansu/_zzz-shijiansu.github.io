<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shijian Homepage – DevOps Team Structure</title><link>/categories/devops-team-structure/</link><description>Recent content in DevOps Team Structure on Shijian Homepage</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 06 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/devops-team-structure/index.xml" rel="self" type="application/rss+xml"/><item><title>Topics: DevOps Anti-Types</title><link>/topics/devops/devops-team-structure/devops-anti-types/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>/topics/devops/devops-team-structure/devops-anti-types/</guid><description>
&lt;blockquote>
&lt;p>&lt;a href="https://web.devopstopologies.com/">https://web.devopstopologies.com/&lt;/a> | 2021-10-06&lt;/p>
&lt;/blockquote>
&lt;h2 id="anti-type-a-dev-and-ops-silos">&lt;strong>Anti-Type A:&lt;/strong> Dev and Ops Silos&lt;/h2>
&lt;p>This is the classic ‘throw it over the wall’ split between Dev and Ops. It means that story points can be claimed early (DONE means ‘feature-complete’, but not working in Production), and software operability suffers because Devs do not have enough context for operational features and Ops folks do not have time or inclination to engage Devs in order to fix the problems before the software goes live.&lt;/p>
&lt;p>We likely all know this topology is bad, but I think there are actually worse topologies; at least with Anti-Type A (Dev and Ops Silos), we know there is a problem.&lt;/p>
&lt;p>&lt;img src="images/anti-type-a.png" alt="Anti-Type A">&lt;/p>
&lt;h2 id="anti-type-b-devops-team-silo">&lt;strong>Anti-Type B:&lt;/strong> DevOps Team Silo&lt;/h2>
&lt;p>The DevOps Team Silo (Anti-Type B) typically results from a manager or exec deciding that they “need a bit of this DevOps thing” and starting a ‘DevOps team’ (probably full of people known as ‘a DevOp‘). The members of the DevOps team quickly form another silo, keeping Dev and Ops further apart than ever as they defend their corner, skills, and toolset from the ‘clueless Devs’ and ‘dinosaur Ops’ people.&lt;/p>
&lt;p>The only situation where a separate DevOps silo really makes sense is when the team is temporary, lasting less than (say) 12 or 18 months, with the express purpose of bringing Dev and Ops closer together, and with a clear mandate to make the DevOps team superfluous after that time; this becomes what I have called a &lt;a href="https://web.devopstopologies.com/#type-five">Type 5 DevOps Topology&lt;/a>.&lt;/p>
&lt;p>&lt;img src="images/anti-type-b.png" alt="Anti-Type B">&lt;/p>
&lt;h2 id="anti-type-c-dev-dont-need-ops">&lt;strong>Anti-Type C:&lt;/strong> Dev Don&amp;rsquo;t Need Ops&lt;/h2>
&lt;p>This topology is borne of a combination of naivety and arrogance from developers and development managers, particularly when starting on new projects or systems. Assuming that Ops is now a thing of the past (“we have the Cloud now, right?”), the developers wildly underestimate the complexity and importance of operational skills and activities, and believe that they can do without them, or just cover them in spare hours.&lt;/p>
&lt;p>Such an Anti-Type C DevOps topology will probably end up needing either a &lt;a href="https://web.devopstopologies.com/#type-three">Type 3 (Ops as IaaS)&lt;/a> or a &lt;a href="https://web.devopstopologies.com/#type-four">Type 4 (DevOps-as-a-Service)&lt;/a> topology when their software becomes more involved and operational activities start to swamp ‘development’ (aka coding) time. If only such teams recognised the importance of Operations as a discipline as important and valuable as software development, they would be able to avoid much pain and unnecessary (and quite basic) operational mistakes&lt;/p>
&lt;p>&lt;img src="images/anti-type-c.png" alt="Anti-Type C">&lt;/p>
&lt;h2 id="anti-type-d-devops-as-tools-team">&lt;strong>Anti-Type D:&lt;/strong> DevOps as Tools Team&lt;/h2>
&lt;p>In order to &amp;ldquo;become DevOps&amp;rdquo; without losing current dev teams velocity (read delivery of functional stories), a DevOps team is set up to work on the tooling required for deployment pipelines, configuration management, environment management, etc. Meanwhile Ops folks continue to work in isolation and Dev teams continue to throw them applications &amp;ldquo;over the wall&amp;rdquo;.&lt;/p>
&lt;p>Although the outcomes of this dedicated team can be beneficial in terms of an improved tool chain, its impact is limited. The fundamental problem of lack of early Ops involvement and collaboration in the application development lifecycle remains unchanged.&lt;/p>
&lt;p>&lt;img src="images/anti-type-d.png" alt="Anti-Type D">&lt;/p>
&lt;h2 id="anti-type-e-rebranded-sysadmin">&lt;strong>Anti-Type E:&lt;/strong> Rebranded SysAdmin&lt;/h2>
&lt;p>This anti-type is typical in organizations with low engineering maturity. They want to improve their practices and reduce costs, yet they fail to see IT as a core driver of the business. Because industry successes with DevOps are now evident, they want to &amp;ldquo;do DevOps&amp;rdquo; as well. Unfortunately, instead of reflecting on the gaps in the current structure and relationships, they take the elusive path of hiring &amp;ldquo;DevOps engineers&amp;rdquo; for their Ops team(s).&lt;/p>
&lt;p>DevOps becomes just a rebranding of the role previously known as SysAdmin, with no real cultural/organizational change taking place. This anti-type is becoming more and more widespread as unscrupulous recruiters jump on the bandwagon searching for candidates with automation and tooling skills. Unfortunately, it&amp;rsquo;s the human communication skills that can make DevOps thrive in an organization.&lt;/p>
&lt;p>&lt;img src="images/anti-type-e.png" alt="Anti-Type E">&lt;/p>
&lt;h2 id="anti-type-f-ops-embedded-in-dev-team">&lt;strong>Anti-Type F:&lt;/strong> Ops Embedded in Dev Team&lt;/h2>
&lt;p>The organization does not want to keep a separate Ops team, so development teams take responsibility for infrastructure, managing environments, monitoring, etc. However, doing so in a project or product-driven way means those items are subject to resource constraints and re-prioritizations which lead to subpar approaches and half-baked solutions.&lt;/p>
&lt;p>In this anti-type the organization shows lack of appreciation for the importance and skills required for effective IT operations. In particular, the value of Ops is diminished because it&amp;rsquo;s treated as an annoyance for Devs (as Ops is managed by a single Dev team manager with other priorities).&lt;/p>
&lt;p>&lt;em>Thanks to &lt;a href="https://twitter.com/ScottPrugh">Scott Prugh&lt;/a> for suggesting clarifications on how Anti-Type F differs from Type 2.&lt;/em>&lt;/p>
&lt;p>&lt;img src="images/anti-type-f.png" alt="Anti-Type F">&lt;/p>
&lt;h2 id="anti-type-g-dev-and-dba-silos">&lt;strong>Anti-Type G:&lt;/strong> Dev and DBA Silos&lt;/h2>
&lt;p>This is a form of &lt;a href="https://web.devopstopologies.com/#anti-type-a">Anti-Type A (Dev and Ops Silos)&lt;/a> which is prominent in medium-to-large companies where multiple legacy systems depend on the same core set of data. Because these databases are so vital for the business, a dedicated DBA team, often under the Ops umbrella, is responsible for their maintenance, performance tuning and disaster recovery. That is understandable. The problem is when this team becomes a gate keeper for any and every database change, effectively becoming an obstacle to small and frequent deployments (a core tenet of DevOps and Continuous Delivery).&lt;/p>
&lt;p>Furthermore, just like Ops in &lt;a href="https://web.devopstopologies.com/#anti-type-a">Anti-Type A&lt;/a>, the DBA team is not involved early in the application development, thus data problems (migrations, performance, etc) are found late in the delivery cycle. Coupled with the overload of supporting multiple applications databases, the end result is constant firefighting and mounting pressure to deliver.&lt;/p>
&lt;p>&lt;img src="images/anti-type-g.png" alt="Anti-Type G">&lt;/p></description></item><item><title>Topics: DevOps Team Topologies</title><link>/topics/devops/devops-team-structure/devops-team-topologies/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>/topics/devops/devops-team-structure/devops-team-topologies/</guid><description>
&lt;blockquote>
&lt;p>&lt;a href="https://web.devopstopologies.com/">https://web.devopstopologies.com/&lt;/a> | 2021-10-06&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-1-dev-and-ops-collaboration">&lt;strong>Type 1:&lt;/strong> Dev and Ops Collaboration&lt;/h2>
&lt;p>This is the ‘promised land’ of DevOps: smooth collaboration between Dev teams and Ops teams, each specialising where needed, but also sharing where needed. There are likely many separate Dev teams, each working on a separate or semi-separate product stack.&lt;/p>
&lt;p>My sense is that this Type 1 model needs quite substantial organisational change to establish it, and a good degree of competence higher up in the technical management team. Dev and Ops must have a clearly expressed and demonstrably effective shared goal (‘Delivering Reliable, Frequent Changes’, or whatever). Ops folks must be comfortable pairing with Devs and get to grips with test-driven coding and Git, and Devs must take operational features seriously and seek out Ops people for input into logging implementations, and so on, all of which needs quite a culture change from the recent past.&lt;/p>
&lt;p>&lt;img src="images/type-1.png" alt="Type 1">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 1 suitability:&lt;/strong> an organisation with strong technical leadership.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>HIGH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-2-fully-shared-ops-responsibilities">&lt;strong>Type 2:&lt;/strong> Fully Shared Ops Responsibilities&lt;/h2>
&lt;p>Where operations people have been integrated in product development teams, we see a Type 2 topology. There is so little separation between Dev and Ops that all people are highly focused on a shared purpose; this is arguable a form of &lt;a href="https://web.devopstopologies.com/#type-one">Type 1 (Dev and Ops Collaboration)&lt;/a>, but it has some special features.&lt;/p>
&lt;p>Organisations such as Netflix and Facebook with effectively a single web-based product have achieved this Type 2 topology, but I think it’s probably not hugely applicable outside a narrow product focus, because the budgetary constraints and context-switching typically present in an organisation with multiple product streams will probably force Dev and Ops further apart (say, back to a &lt;a href="https://web.devopstopologies.com/#type-one">Type 1 model&lt;/a>). This topology might also be called ‘NoOps‘, as there is no distinct or visible Operations team (although the Netflix NoOps might also be &lt;a href="https://web.devopstopologies.com/#type-three">Type 3 (Ops as IaaS)&lt;/a>).&lt;/p>
&lt;p>&lt;img src="images/type-2.png" alt="Type 2">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 2 suitability:&lt;/strong> organisations with a single main web-based product or service.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>HIGH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-3-ops-as-infrastructure-as-a-service-platform">&lt;strong>Type 3:&lt;/strong> Ops as Infrastructure-as-a-Service (Platform)&lt;/h2>
&lt;p>For organisations with a fairly traditional IT Operations department which cannot or will not change rapidly [enough], and for organisations who run all their applications in the public cloud (Amazon EC2, Rackspace, Azure, etc.), it probably helps to treat Operations as a team who simply provides the elastic infrastructure on which applications are deployed and run; the internal Ops team is thus directly equivalent to Amazon EC2, or Infrastructure-as-a-Service.&lt;/p>
&lt;p>A team (perhaps a virtual team) within Dev then acts as a source of expertise about operational features, metrics, monitoring, server provisioning, etc., and probably does most of the communication with the IaaS team. This team is still a Dev team, however, following standard practices like TDD, CI, iterative development, coaching, etc.&lt;/p>
&lt;p>The IaaS topology trades some potential effectiveness (losing direct collaboration with Ops people) for easier implementation, possibly deriving value more quickly than by trying for &lt;a href="https://web.devopstopologies.com/#type-one">Type 1 (Dev and Ops Collaboration)&lt;/a> which could be attempted at a later date.&lt;/p>
&lt;p>&lt;img src="images/type-3.png" alt="Type 3">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 3 suitability:&lt;/strong> organisations with several different products and services, with a traditional Ops department, or whose applications run entirely in the public cloud.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>MEDIUM&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-4-devops-as-an-external-service">&lt;strong>Type 4:&lt;/strong> DevOps as an External Service&lt;/h2>
&lt;p>Some organisations, particularly smaller ones, might not have the finances, experience, or staff to take a lead on the operational aspects of the software they produce. The Dev team might then reach out to a service provider like Rackspace to help them build test environments and automate their infrastructure and monitoring, and advise them on the kinds of operational features to implement during the software development cycles.&lt;/p>
&lt;p>What might be called DevOps-as-a-Service could be a useful and pragmatic way for a small organisation or team to learn about automation, monitoring, and configuration management, and then perhaps move towards a &lt;a href="https://web.devopstopologies.com/#type-three">Type 3 (Ops as IaaS)&lt;/a> or even &lt;a href="https://web.devopstopologies.com/#type-one">Type 1 (Dev and Ops Collaboration)&lt;/a> model as they grow and take on more staff with operational focus.&lt;/p>
&lt;p>&lt;img src="images/type-4.png" alt="Type 4">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 4 suitability:&lt;/strong> smaller teams or organisations with limited experience of operational issues.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>MEDIUM&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-5-devops-team-with-an-expiry-date">&lt;strong>Type 5:&lt;/strong> DevOps Team with an Expiry Date&lt;/h2>
&lt;p>The DevOps Team with an Expiry Date (Type 5) looks substantially like &lt;a href="https://web.devopstopologies.com/#anti-type-b">Anti-Type B (DevOps Team Silo)&lt;/a>, but its intent and longevity are quite different. This temporary team has a mission to bring Dev and Ops closer together, ideally towards a &lt;a href="https://web.devopstopologies.com/#type-one">Type 1 (Dev and Ops Collaboration)&lt;/a> or &lt;a href="https://web.devopstopologies.com/#type-two">Type 2 (Fully Shared Ops Responsibilities)&lt;/a> model, and eventually make itself obsolete.&lt;/p>
&lt;p>The members of the temporary team will ‘translate’ between Dev-speak and Ops-speak, introducing crazy ideas like stand-ups and Kanban for Ops teams, and thinking about dirty details like load-balancers, management NICs, and SSL offloading for Dev teams. If enough people start to see the value of bringing Dev and Ops together, then the temporary team has a real chance of achieving its aim; crucially, long-term responsibility for deployments and production diagnostics should not be given to the temporary team, otherwise it is likely to become a &lt;a href="https://web.devopstopologies.com/#anti-type-b">DevOps Team Silo (Anti-Type B).&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/type-5.png" alt="Type 5">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 5 suitability:&lt;/strong> as a precursor to &lt;a href="https://web.devopstopologies.com/#type-one">Type 1 topology&lt;/a>, but beware the danger of &lt;a href="https://web.devopstopologies.com/#anti-type-b">Anti-Type B&lt;/a>.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>LOW to HIGH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-6-devops-advocacy-team">&lt;strong>Type 6:&lt;/strong> DevOps Advocacy Team&lt;/h2>
&lt;p>Within organisations that have a large gap between Dev and Ops (or the tendency towards a large gap), it can be effective to have a &amp;lsquo;facilitating&amp;rsquo; DevOps team that keeps the Dev and Ops sides talking. This is a version of &lt;a href="https://web.devopstopologies.com/#type-five">Type 5 (DevOps Team with an Expiry Date)&lt;/a> but where the DevOps team exists on an ongoing basis with the specific remit of facilitating collaboration and cooperation between Dev and Ops teams. Members of this team are sometimes called &amp;lsquo;DevOps Advocates&amp;rsquo;, because they help to spread awareness of DevOps practices.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://twitter.com/ericminick/status/517335119330172930">The goal for a &amp;ldquo;DevOps Team&amp;rdquo; should be to put itself out of business by enabling the rest of the org.&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="images/type-6.png" alt="Type 6">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 6 suitability:&lt;/strong> organisations with a tendency for Dev and Ops to drift apart. Beware the danger of &lt;a href="https://web.devopstopologies.com/#anti-type-b">Anti-Type B.&lt;/a>
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>MEDIUM to HIGH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-7-sre-team-google-model">&lt;strong>Type 7:&lt;/strong> SRE Team (Google Model)&lt;/h2>
&lt;p>DevOps often recommends that Dev teams join the on-call rotation, but it&amp;rsquo;s not essential. In fact, some organisations (including Google) run a different model, with an explicit &amp;lsquo;hand-off&amp;rsquo; from Development to the team that runs the software, the Site Reliability Engineering (SRE) team. In this model, the Dev teams need to provide test evidence (logs, metrics, etc.) to the SRE team showing that their software is of a good enough standard to be supported by the SRE team.&lt;/p>
&lt;p>Crucially, the SRE team can reject software that is operationally substandard, asking the Developers to improve the code before it is put into Production. Collaboration between Dev and SRE happens around operational criteria but once the SRE team is happy with the code, they (and not the Dev team) support it in Production.&lt;/p>
&lt;p>&lt;img src="images/type-7.png" alt="Type 7">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 7 suitability:&lt;/strong> Type 7 is suitable only for organisations with a high degree of engineering and organisational maturity. Beware of a return to &lt;a href="https://web.devopstopologies.com/#anti-type-a">Anti-Type A&lt;/a> if the SRE/Ops team is told to &amp;ldquo;JFDI&amp;rdquo; deploy.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>LOW to HIGH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-8-container-driven-collaboration">&lt;strong>Type 8:&lt;/strong> Container-Driven Collaboration&lt;/h2>
&lt;p>Containers remove the need for some kinds of collaboration between Dev and Ops by encapsulating the deployment and runtime requirements of an app into a container. In this way, the container acts as a boundary on the responsibilities of both Dev and Ops. With a sound engineering culture, the Container-Driven Collaboration model works well, but if Dev starts to ignore operational considerations this model can revert towards to an adversarial &amp;lsquo;us and them&amp;rsquo;.&lt;/p>
&lt;p>&lt;img src="images/type-8.png" alt="Type 8">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 8 suitability:&lt;/strong> Containers can work very well, but beware &lt;a href="https://web.devopstopologies.com/#anti-type-a">Anti-Type A&lt;/a>, where the Ops team is expected to run anything that Dev throws at it.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>MEDIUM to HIGH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="type-9-dev-and-dba-collaboration">&lt;strong>Type 9:&lt;/strong> Dev and DBA Collaboration&lt;/h2>
&lt;p>In order to bridge the Dev-DBA chasm, some organisations have experimented with something like Type 9, where a database capability from the DBA team is complimented with a database capability (or specialism) from the Dev team. This seems to help to translate between the Dev-centric view of databases (as essentially dumb persistence stores for apps) and the DBA-centric view of databases (smart, rich sources of business value).&lt;/p>
&lt;p>&lt;img src="images/type-9.png" alt="Type 9">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Type 9 suitability:&lt;/strong> for organisations with one or more large, central databases with multiple connected applications.
&lt;strong>Potential effectiveness:&lt;/strong> &lt;strong>MEDIUM&lt;/strong>&lt;/p>
&lt;/blockquote></description></item></channel></rss>