<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shijian Blog – Examples</title><link>/categories/examples.html</link><description>Recent content in Examples on Shijian Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 05 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="/categories/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Internal Developer Platform (IDP)</title><link>/docs/platform-engineering/internal-developer-platform-idp.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/platform-engineering/internal-developer-platform-idp.html</guid><description/></item><item><title>Docs: Platform Engineering</title><link>/docs/platform-engineering.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/platform-engineering.html</guid><description/></item><item><title>Docs: Getting Started</title><link>/docs/getting-started.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started.html</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>Information in this section helps your user try your project themselves.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Introductory “Hello World” example, if appropriate. More complex tutorials should live in the Tutorials section.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Is there any initial setup users need to do after installation to try your project?&lt;/p>
&lt;h2 id="try-it-out">Try it out!&lt;/h2>
&lt;p>Can your users test their installation, for example by running a command or deploying a Hello World example?&lt;/p></description></item><item><title>Docs: Internal Platform Teams - What Are They and Do You Need One</title><link>/docs/platform-engineering/internal-developer-platform-idp/internal-platform-teams-what-are-they-and-do-you-need-one.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/platform-engineering/internal-developer-platform-idp/internal-platform-teams-what-are-they-and-do-you-need-one.html</guid><description>
&lt;blockquote>
&lt;p>&lt;a href="https://humanitec.com/blog/internal-platform-teams-what-are-they-and-do-you-need-one">https://humanitec.com/blog/internal-platform-teams-what-are-they-and-do-you-need-one&lt;/a> | 2021-04-01&lt;/p>
&lt;/blockquote>
&lt;p>The early 2000s, the era of the SysAdmin. They were the ultimate rulers of the infrastructure, the gatekeepers of any setup. If your app developers wanted anything done, they needed to pass through them. Specifically, this meant every script and piece of code was thrown over the fence to SysAdmins to figure out what to do with it and how to deploy it. Not a great experience on either side of the fence. Then 2007 came and Werner Vogels &lt;a href="https://queue.acm.org/detail.cfm?id=1142065">famously yelled&lt;/a>: “You build it, you run it”. And a whole generation of SysAdmins was fired. Cloud native was finally allowing developers to provision the resources they needed, whenever they needed them. The answer to every dev teams’ problems. Or was it?&lt;/p>
&lt;p>While it did bring about a plethora of improvements around scalability, availability and ease of operation, it turns out Cloud native also meant things got a lot more complicated. As every company’s value proposition becomes digitized (&lt;a href="https://www.youtube.com/watch?v=ZAKn9qkYEwU&amp;amp;t=1978s">as Twilio’s CEO explains&lt;/a>), the degree of complexity of its systems grows exponentially. They suddenly need to integrate with countless new technologies, be deployed across multiple clusters and vendors in different regions, all while offering an effortless end experience to customers. The result of all of this is that your frontend app developers are completely overwhelmed by the sheer amount of tools that make up your infrastructure. And whenever they are supposed to be using those YAML files for their deployments, they end up going to your Ops team to ask for help. So much for “you build it, you run it”.&lt;/p>
&lt;h2 id="the-key-to-true-devops">The key to true DevOps&lt;/h2>
&lt;p>Once they realized this approach to DevOps just wasn’t going to scale the way they needed it to, top-tier engineering organizations started looking at alternative solutions. In order to grow rapidly, while keeping their systems reliable and maintainable, and without compromising their developers' end experience of working with the infrastructure, leading tech organizations introduced Internal Platform teams.&lt;/p>
&lt;p>Platform teams build internal workflows and tooling, such as &lt;a href="https://humanitec.com/blog/what-is-an-internal-developer-platform">Internal Developer Platforms (IDPs)&lt;/a>, to ensure application developers are shielded from the evolving complexities of the underlying infrastructure. They create a smooth development and deployment experience for everyone involved.&lt;/p>
&lt;p>The common thread in everything they do: enable developer self-service across the organization. As Skelton and Pais explain in &lt;a href="https://teamtopologies.com/book">Team Topologies&lt;/a>,&lt;/p>
&lt;p>“The Platform team’s knowledge is best made available via self-service capabilities via a web portal and or/programmable API [i.e. an IDP] (as opposed to lengthy instruction manuals)”.&lt;/p>
&lt;p>&lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">The 2020 State of DevOps report by Puppet&lt;/a> clearly surfaces this by mapping the level of DevOps sophistication against the use of self-service platforms built by Platform teams.&lt;/p>
&lt;p>&lt;img src="images/01.png" alt="img">&lt;/p>
&lt;p>Source: &lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">2020 State of DevOps report by Puppet&lt;/a>&lt;/p>
&lt;p>Jason Warner, CTO at GitHub, &lt;a href="https://humanitec.com/blog/jason-warner-why-github-built-their-own-internal-developer-platform">explained in his interview with us&lt;/a> how building their platform team and their IDP wasn’t really a cosmetic choice but rather a vital move on their part, which allowed GitHub to scale the way they did. Jan Löffler, Head of Platform at Zalando (largest e-commerce in Germany), &lt;a href="https://humanitec.com/blog/why-zalando-builds-an-own-developer-platform">agrees that an Internal Platform team&lt;/a>, in combination with an Internal Developer Platform, is an essential component of what makes such a large organization function and ship software so much faster than a regular team.&lt;/p>
&lt;h2 id="impressive-impact">Impressive impact&lt;/h2>
&lt;p>The strategic focus on Platform teams and developer self-service in these elite organizations clearly pays off. The results of well-trimmed Internal Platform teams are quite astounding: top performers deploy a stunning 208 times more frequently than low performers. &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf">The 2019 Accelerate State of DevOps Report&lt;/a> shows very interesting data on the top percentile teams:&lt;/p>
&lt;p>&lt;img src="images/02.png" alt="02">&lt;/p>
&lt;p>Source: &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf">2019 Accelerate State of DevOps Report&lt;/a>&lt;/p>
&lt;p>While these “elite performers” only make up for a fraction of the market, this trend is catching the attention of many others. According to the &lt;a href="https://www.gartner.com/en/documents/3906678/how-to-scale-devops-by-building-platform-teams">2019 Gartner DevOps report&lt;/a>, IDPs and Platform teams are increasingly the go-to approach to solve problems holistically and handle multiple teams and applications, instead of just the projects at hand. According to this report, 60% of surveyed teams are currently embarking onto the platform journey.&lt;/p>
&lt;p>We have already written at length about &lt;a href="https://humanitec.com/blog/the-rise-of-internal-developer-platforms">the rise of Internal Developer Platforms&lt;/a> in the industry and &lt;a href="https://humanitec.com/blog/what-is-an-internal-developer-platform">what they are&lt;/a>. A match made in DevOps heaven, IDPs are the indispensable companion of any Platform team. Together, they provide app developers with the best tools and workflows to do their job as efficiently and effortlessly as possible.&lt;/p>
&lt;p>&lt;strong>In this article&lt;/strong>, we will dive deeper into the Platform team side of things: the different aspects of building and scaling one, while ensuring that it continuously generates value for all your app dev teams.&lt;/p>
&lt;h2 id="how-to-build-an-internal-platform-team">How to build an Internal Platform team&lt;/h2>
&lt;p>Alright, Internal Platform teams are pretty damn important when your organization is scaling up. And if that’s you, right now you might be thinking to yourself you need one. So where do you start?&lt;/p>
&lt;h3 id="the-mission">The mission&lt;/h3>
&lt;p>As usual, from the why. When building an Internal Platform team, it is key you clearly define its purpose and mission. “To build the tools (IDPs) that enable developers to shio scalable applications with high speed, quality and performance” is an example. Whatever makes the most sense for your organization, make sure you set this in stone. Along with the mission statement, it is important you establish early on that the Platform team is not to be seen as some sort of extension of the SRE or Ops teams, but rather as its own product team, serving customers (app developers) within your organization.&lt;/p>
&lt;p>This differentiation is crucial not only from an engineering and product point of view, but also from a management perspective. In order to get buy-in on different levels, Platform teams cannot afford to be speaking only the technical language, but need to master the business lingo too. It is critical for the long term success of any Internal Platform team that it gets seen within the organization as not yet another cost center we are adding to our already expensive engineering balance sheet. Instead, it is a value center for all other app development teams and, eventually, for the end consumer.&lt;/p>
&lt;h3 id="internal-balance">Internal balance&lt;/h3>
&lt;p>Once that is cleared up, you need to strike the right balance. Successful Internal Platform teams manage to put in place strong guardrails and standards for their development teams, but without taking away too much of their autonomy. To have meaningful impact, Platform teams depend on having standards in their organization. Trying to support every possible programming language, framework, DB, and whatever exotic tech engineers like that month only results in Platform teams spreading themselves too thin. On the flip side, you don’t want to come across as a patronizing ruler of infrastructure by imposing your standards on every other team. &lt;a href="https://humanitec.com/blog/devops-standards-vs-freedom">Standards vs. freedom&lt;/a> is a complex topic we have covered before. There’s no one-size-fits-all solution here, but you have to be mindful of the challenges of introducing a centralized set of standards in your organization.&lt;/p>
&lt;p>Finally, ensure you select the right SREs and DevOps engineers to build out your team. This sounds obvious, but there’s quite some &lt;a href="https://www.reddit.com/r/sre/comments/m12sdl/becoming_a_platform_engineer/">debate around what makes for a good Platform engineer&lt;/a>. It is paramount he or she fully appreciates internal tooling as a real product to iterate on, based on the feedback of their end customer: the rest of the engineering teams. Deep technical capabilities like language skills are key for a Platform engineer, but make sure you don’t only consider technical sophistication when hiring for this position, also look for candidates with a multidisciplinary understanding of their role within the organization. Alongside these core Ops competencies, you’ll also need front-end and design roles to build a complete Platform team. Remember, they are building a full fledged product for your organization.&lt;/p>
&lt;h3 id="the-values-of-platform-teams">The value(s) of Platform teams&lt;/h3>
&lt;p>Congratulations, you convinced management to give you the green light and went off to build a world class Internal Platform team. So how do you make sure it was all worth it? At the end of the day, they are not shipping anything that’s customer facing, so how do you know they are working on the right things to maximize value for the rest of the engineering org?&lt;/p>
&lt;p>We compiled the key areas that we have seen Internal Platform teams focus on, in order to deliver the right internal tooling, standards and workflows to their application developers. The cornerstone is always the reduction of complexity and cognitive load for the end user of the Internal Developer Platform. If that is unstable, your engineering productivity will drop dramatically. But let’s get into the details.&lt;/p>
&lt;h3 id="treat-your-platform-as-a-product">Treat your platform as a product&lt;/h3>
&lt;p>We mentioned this already, but it is probably the most important takeaway: your Internal Platform team needs to be driven by a &lt;a href="https://martinfowler.com/articles/talk-about-platforms.html">product mindset&lt;/a>. They need to focus on what provides real value (as opposed to what is “cool” to work on) for their internal customers, the app developers, based on the feedback they gave them. This philosophy needs to be drilled into every aspect of your Platform team’s activities. Iterate on your Internal Developer Platform, ship new features. At the same time, don’t forget you are also responsible for maintaining a reliable and scalable Ops setup. If something goes wrong in your team, all other teams will suffer from it.&lt;/p>
&lt;p>&lt;img src="images/03.png" alt="03">&lt;/p>
&lt;p>Source: &lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">2020 State of DevOps report by Puppet&lt;/a>&lt;/p>
&lt;h3 id="optimize-iteration-speed">Optimize iteration speed&lt;/h3>
&lt;p>When you think about it, the speed at which your organization innovates is directly correlated to (and constrained by) your iteration speed. Increase that, and your app developers will be able to consistently ship more features and products to your customers, confident that things won’t break.&lt;/p>
&lt;p>In order to do so, Internal Platform teams need to focus on optimizing every step of the software delivery process. In particular, they should:&lt;/p>
&lt;ul>
&lt;li>Make local development and testing as fast and painless as possible&lt;/li>
&lt;li>Critically simplify the way developers interact with their infrastructure (and remove the &lt;a href="https://humanitec.com/blog/tame-your-zoo-of-scripts">zoo of scripts&lt;/a> from their day to day)&lt;/li>
&lt;li>Lower barrier to entry by building the right tools and documentation that enable engineers to onboard faster. You should move away from tribal knowledge as much as you can.&lt;/li>
&lt;/ul>
&lt;h3 id="solve-common-problems">Solve common problems&lt;/h3>
&lt;p>A good Platform team prevents other teams from reinventing the wheel by solving common problems time and again. It’s key to figure out what these common problems are: start by understanding developer pain points and friction areas that cause slowdowns in development. You can gather this information both qualitatively through developers’ feedback and quantitatively via engineering KPIs. This intel, combined with an understanding of the future direction of the product, can help the Internal Platform team shape a good roadmap and pick the right battles to fight. The Puppet report gives us some insights on what the core responsibilities of Platform teams are.&lt;/p>
&lt;p>&lt;img src="images/04.png" alt="04">&lt;/p>
&lt;p>Source: &lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">2020 State of DevOps report by Puppet&lt;/a>&lt;/p>
&lt;h3 id="be-glue-my-friend">Be glue, my friend&lt;/h3>
&lt;p>Platform teams need to define a golden path for their developers: a reduced set of sane, proven choices of tools that get the job done and allow you to build, deploy, and operate your services. Once you have defined this path, the main value you create as an Internal Platform team is to be the sticky glue that brings all the tools together and ensures a smooth development and deployment experience for your engineers.&lt;/p>
&lt;p>It’s important you don’t go to war with commercial vendors. It doesn’t matter if your homegrown CI/CD solution is superior today. AWS, GCP, Humanitec will catch up, faster than expected, and make that tool and team redundant. Every Platform team should be asking themselves: what is our differentiator? Instead of building in-house alternatives to a CI system, a CD tool or a metrics platform and compete against businesses that have 20 or 50 times your capacity, focus on the specific needs of your teams and tailor off-the-shelf solutions to your requirements. Commercial competitors are more likely to optimize for more generic needs of the industry anyway.&lt;/p>
&lt;p>&lt;img src="images/05.png" alt="05">&lt;/p>
&lt;h3 id="educate-and-empower-your-teams">Educate and empower your teams&lt;/h3>
&lt;p>Finally, a good Platform team is a central source of education and best practices for the rest of the company. Some of the most impactful activities we saw elite teams routinely perform in this area include:&lt;/p>
&lt;ul>
&lt;li>Fostering regular architectural design reviews for new functional projects and proposing common ways of development across dev teams.&lt;/li>
&lt;li>Sharing knowledge, experiences and collectively define best practices and architectural guidelines.&lt;/li>
&lt;li>Ensuring engineers have the right tools in place to validate and check for common pitfalls like code smells, bugs and performance degradations.&lt;/li>
&lt;li>Organizing internal hackathons so dev teams can surface their requirements for internal tooling needs. Nigel Simons (Director Enterprise Tech at a Fortune 100) explained in a &lt;a href="https://humanitec.com/blog/developer-experience-roundtable-continuous-improvement-nigel-simpson-erik-muttersbach">conversation with us&lt;/a> that 50% of their teams’ hackathon ideas actually make it to production.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>If you and your team are scaling up your infrastructure and adding engineers at an increasing pace, you are likely considering (or hopefully will consider, after reading this) to build an Internal Platform team. The benefits can be many and if done right, a Platform team can allow your organization to scale considerably faster and more efficiently than with a less standardized approach and product driven mentality.&lt;/p></description></item><item><title>Docs: Setup by Docsy example</title><link>/docs/setup-by-docsy-example.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/setup-by-docsy-example.html</guid><description>
&lt;blockquote>
&lt;p>Su Shijian / 2021-09-25&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># about google docsy - https://www.docsy.dev/docs/&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># google docsy example template&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># create the github repository from the google docsy example &amp;#34;Use this template&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># refer to https://www.docsy.dev/docs/getting-started/#using-the-github-ui&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># github hosting&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># make it possible hosting in the github: &amp;lt;user&amp;gt;.github.io&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># refer to&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## https://docs.github.com/en/pages/getting-started-with-github-pages&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># development environment&lt;/span>
brew -v &lt;span style="color:#8f5902;font-style:italic"># Homebrew 3.2.13&lt;/span>
nvm --version &lt;span style="color:#8f5902;font-style:italic"># 0.35.3, install via brew&lt;/span>
node -v &lt;span style="color:#8f5902;font-style:italic"># v16.10.0 # install via nvm&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># nvm install node --reinstall-packages-from=node # if need to upgrade&lt;/span>
brew install hugo &lt;span style="color:#8f5902;font-style:italic"># default is with &amp;#34;extended&amp;#34; for scss&lt;/span>
hugo version &lt;span style="color:#8f5902;font-style:italic"># hugo v0.88.1+extended&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># github&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># include public, resources in .gitignore&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># refer to https://www.toptal.com/developers/gitignore/api/hugo&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># clean up the google docsy example&lt;/span>
rm deploy.sh
rm CONTRIBUTING.md
rm LICENSE
rm Dockerfile
rm docker-compose.yaml
rm netlify.toml
&lt;span style="color:#8f5902;font-style:italic"># verify&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## important&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## in google docsy, it requires hugo extended for scss&lt;/span>
git clone https://github.com/shijiansu/shijiansu.github.io
&lt;span style="color:#204a87">cd&lt;/span> shijiansu.github.io
git submodule update --init --recursive --depth &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># because themes/docsy is submodule&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># below are also the submodule, please ensure they exists in your local&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## themes/docsy/assets/vendor/Font-Awesome&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## themes/docsy/assets/vendor/bootstrap&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># if you do not set up from the google docsy example, &lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># then you need to install below nodejs dependencies manually&lt;/span>
npm install -D autoprefixer
npm install -D postcss-cli
npm install -D postcss
npm install
hugo server
&lt;span style="color:#8f5902;font-style:italic"># github actions&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># make default branch from &amp;#34;master&amp;#34; (as google docsy example) to &amp;#34;main&amp;#34; because of gh-pages.yml&lt;/span>
mkdir .github &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> .github
mkdir workflows &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> workflows
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;lt;&amp;lt;&lt;/span> EOL
line ...
EOL &amp;gt; gh-pages.yml
&lt;span style="color:#8f5902;font-style:italic"># github actions yml explaination&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## hugo github action:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## nodjes environment: https://github.com/actions/setup-node&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># github pages&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## set up GitHub Pages:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">## repository -&amp;gt; Settings -&amp;gt; Pages -&amp;gt; select Source to &amp;#34;Branch: gh-pages&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Example Page</title><link>/docs/getting-started/example-page.html</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>/docs/getting-started/example-page.html</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page. Replace it with your own content.&lt;/p>
&lt;/div>
&lt;p>Text can be &lt;strong>bold&lt;/strong>, &lt;em>italic&lt;/em>, or &lt;del>strikethrough&lt;/del>. &lt;a href="https://gohugo.io">Links&lt;/a> should be blue with no underlines (unless hovered over).&lt;/p>
&lt;p>There should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.&lt;/p>
&lt;p>90&amp;rsquo;s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps &lt;strong>kale chips&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>There should be no margin above this first sentence.&lt;/p>
&lt;p>Blockquotes should be a lighter gray with a border along the left side in the secondary color.&lt;/p>
&lt;p>There should be no margin below this final sentence.&lt;/p>
&lt;/blockquote>
&lt;h2 id="first-header-2">First Header 2&lt;/h2>
&lt;p>This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier &lt;strong>craft beer&lt;/strong>. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven&amp;rsquo;t heard of them copper mug, crucifix green juice vape &lt;em>single-origin coffee&lt;/em> brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!&lt;/p>
&lt;p>Deae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.&lt;/p>
&lt;p>On big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.&lt;/p>
&lt;p>Scenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR&amp;amp;B. &lt;strong>I love this life we live in&lt;/strong>.&lt;/p>
&lt;h2 id="second-header-2">Second Header 2&lt;/h2>
&lt;blockquote>
&lt;p>This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;/blockquote>
&lt;h3 id="header-3">Header 3&lt;/h3>
&lt;pre tabindex="0">&lt;code>This is a code block following a header.
&lt;/code>&lt;/pre>&lt;p>Next level leggings before they sold out, PBR&amp;amp;B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.&lt;/p>
&lt;h4 id="header-4">Header 4&lt;/h4>
&lt;ul>
&lt;li>This is an unordered list following a header.&lt;/li>
&lt;li>This is an unordered list following a header.&lt;/li>
&lt;li>This is an unordered list following a header.&lt;/li>
&lt;/ul>
&lt;h5 id="header-5">Header 5&lt;/h5>
&lt;ol>
&lt;li>This is an ordered list following a header.&lt;/li>
&lt;li>This is an ordered list following a header.&lt;/li>
&lt;li>This is an ordered list following a header.&lt;/li>
&lt;/ol>
&lt;h6 id="header-6">Header 6&lt;/h6>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>What&lt;/th>
&lt;th>Follows&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A table&lt;/td>
&lt;td>A header&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A table&lt;/td>
&lt;td>A header&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A table&lt;/td>
&lt;td>A header&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>There&amp;rsquo;s a horizontal rule above and below this.&lt;/p>
&lt;hr>
&lt;p>Here is an unordered list:&lt;/p>
&lt;ul>
&lt;li>Liverpool F.C.&lt;/li>
&lt;li>Chelsea F.C.&lt;/li>
&lt;li>Manchester United F.C.&lt;/li>
&lt;/ul>
&lt;p>And an ordered list:&lt;/p>
&lt;ol>
&lt;li>Michael Brecker&lt;/li>
&lt;li>Seamus Blake&lt;/li>
&lt;li>Branford Marsalis&lt;/li>
&lt;/ol>
&lt;p>And an unordered task list:&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Create a Hugo theme&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Add task lists to it&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Take a vacation&lt;/li>
&lt;/ul>
&lt;p>And a &amp;ldquo;mixed&amp;rdquo; task list:&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Pack bags&lt;/li>
&lt;li>?&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Travel!&lt;/li>
&lt;/ul>
&lt;p>And a nested list:&lt;/p>
&lt;ul>
&lt;li>Jackson 5
&lt;ul>
&lt;li>Michael&lt;/li>
&lt;li>Tito&lt;/li>
&lt;li>Jackie&lt;/li>
&lt;li>Marlon&lt;/li>
&lt;li>Jermaine&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TMNT
&lt;ul>
&lt;li>Leonardo&lt;/li>
&lt;li>Michelangelo&lt;/li>
&lt;li>Donatello&lt;/li>
&lt;li>Raphael&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Definition lists can be used with Markdown syntax. Definition headers are bold.&lt;/p>
&lt;dl>
&lt;dt>Name&lt;/dt>
&lt;dd>Godzilla&lt;/dd>
&lt;dt>Born&lt;/dt>
&lt;dd>1952&lt;/dd>
&lt;dt>Birthplace&lt;/dt>
&lt;dd>Japan&lt;/dd>
&lt;dt>Color&lt;/dt>
&lt;dd>Green&lt;/dd>
&lt;/dl>
&lt;hr>
&lt;p>Tables should have bold headings and alternating shaded rows.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Artist&lt;/th>
&lt;th>Album&lt;/th>
&lt;th>Year&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Michael Jackson&lt;/td>
&lt;td>Thriller&lt;/td>
&lt;td>1982&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prince&lt;/td>
&lt;td>Purple Rain&lt;/td>
&lt;td>1984&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Beastie Boys&lt;/td>
&lt;td>License to Ill&lt;/td>
&lt;td>1986&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If a table is too wide, it should scroll horizontally.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Artist&lt;/th>
&lt;th>Album&lt;/th>
&lt;th>Year&lt;/th>
&lt;th>Label&lt;/th>
&lt;th>Awards&lt;/th>
&lt;th>Songs&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Michael Jackson&lt;/td>
&lt;td>Thriller&lt;/td>
&lt;td>1982&lt;/td>
&lt;td>Epic Records&lt;/td>
&lt;td>Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R&amp;amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical&lt;/td>
&lt;td>Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prince&lt;/td>
&lt;td>Purple Rain&lt;/td>
&lt;td>1984&lt;/td>
&lt;td>Warner Brothers Records&lt;/td>
&lt;td>Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R&amp;amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal&lt;/td>
&lt;td>Let&amp;rsquo;s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I&amp;rsquo;m a Star, Purple Rain&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Beastie Boys&lt;/td>
&lt;td>License to Ill&lt;/td>
&lt;td>1986&lt;/td>
&lt;td>Mercury Records&lt;/td>
&lt;td>noawardsbutthistablecelliswide&lt;/td>
&lt;td>Rhymin &amp;amp; Stealin, The New Style, She&amp;rsquo;s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Code snippets like &lt;code>var foo = &amp;quot;bar&amp;quot;;&lt;/code> can be shown inline.&lt;/p>
&lt;p>Also, &lt;code>this should vertically align&lt;/code> &lt;del>&lt;code>with this&lt;/code>&lt;/del> &lt;del>and this&lt;/del>.&lt;/p>
&lt;p>Code can also be shown in a block element.&lt;/p>
&lt;pre tabindex="0">&lt;code>foo := &amp;quot;bar&amp;quot;;
bar := &amp;quot;foo&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>Code can also use syntax highlighting.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">`var foo = &amp;#34;bar&amp;#34;;`&lt;/span>
&lt;span style="color:#000">lexer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">lexers&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;javascript&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">iterator&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">lexer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Tokenise&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">style&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">styles&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;github&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">formatter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">html&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">html&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithLineNumbers&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">buff&lt;/span> &lt;span style="color:#000">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Buffer&lt;/span>
&lt;span style="color:#000">formatter&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">buff&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">style&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">iterator&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buff&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.
&lt;/code>&lt;/pre>&lt;p>Inline code inside table cells should still be distinguishable.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Javascript&lt;/td>
&lt;td>&lt;code>var foo = &amp;quot;bar&amp;quot;;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ruby&lt;/td>
&lt;td>&lt;code>foo = &amp;quot;bar&amp;quot;{&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>Small images should be shown at their actual size.&lt;/p>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Picea_abies_shoot_with_buds%2C_Sogndal%2C_Norway.jpg/240px-Picea_abies_shoot_with_buds%2C_Sogndal%2C_Norway.jpg" alt="">&lt;/p>
&lt;p>Large images should always scale down and fit in the content container.&lt;/p>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Picea_abies_shoot_with_buds%2C_Sogndal%2C_Norway.jpg/1024px-Picea_abies_shoot_with_buds%2C_Sogndal%2C_Norway.jpg" alt="">&lt;/p>
&lt;p>&lt;em>The photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.&lt;/em>&lt;/p>
&lt;h2 id="components">Components&lt;/h2>
&lt;h3 id="alerts">Alerts&lt;/h3>
&lt;p>
&lt;div class="alert alert-primary" role="alert">
This is an alert.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This is an alert with a title.
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This is an alert with a title and &lt;strong>Markdown&lt;/strong>.
&lt;/div>
&lt;div class="alert alert-success" role="alert">
This is a successful alert.
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
This is a warning.
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
This is a warning with a title.
&lt;/div>
&lt;/p>
&lt;h2 id="another-heading">Another Heading&lt;/h2>
&lt;p>Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p>
&lt;h3 id="this-document">This Document&lt;/h3>
&lt;p>Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam &lt;em>eripitur&lt;/em>? Sitim noceat signa &lt;em>probat quidem&lt;/em>. Sua longis &lt;em>fugatis&lt;/em> quidem genae.&lt;/p>
&lt;h3 id="pixel-count">Pixel Count&lt;/h3>
&lt;p>Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR&amp;amp;B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.&lt;/p>
&lt;h3 id="contact-info">Contact Info&lt;/h3>
&lt;p>Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.&lt;/p>
&lt;h3 id="external-links">External Links&lt;/h3>
&lt;p>Stumptown PBR&amp;amp;B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.&lt;/p>
&lt;pre tabindex="0">&lt;code>This is the final element on the page and there should be no margin below this.
&lt;/code>&lt;/pre></description></item></channel></rss>