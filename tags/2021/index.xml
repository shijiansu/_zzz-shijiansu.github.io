<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shijian Homepage – 2021</title><link>/tags/2021/</link><description>Recent content in 2021 on Shijian Homepage</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 27 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/2021/index.xml" rel="self" type="application/rss+xml"/><item><title>Topics: Introduction</title><link>/topics/cloud-native/open-application-model/introduction/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><guid>/topics/cloud-native/open-application-model/introduction/</guid><description>
&lt;p>An open standard for defining cloud native apps.&lt;/p>
&lt;p>Focused on application rather than container or orchestrator, Open Application Model [OAM] brings modular, extensible, and portable design for modeling application deployment with higher level yet consistent API.&lt;/p>
&lt;p>This is the key to enable simple yet robust application delivery across hybrid environments including Kubernetes, cloud, or even IoT devices.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;h3 id="1-traditional-way---app-deployment-is-hard">1. Traditional Way - App Deployment is Hard&lt;/h3>
&lt;ol>
&lt;li>Developers spend time on infrastructure details instead of apps - ingress, labels, DNS, etc, and learning how the infrastructure is implemented.&lt;/li>
&lt;li>Inextensible - upper layer platform may be introduced, but it&amp;rsquo;s almost certain that the needs of your app will outgrow the capabilities of that platform soon.&lt;/li>
&lt;li>Runtime lock-in - app description is tightly coupled with the runtime infrastructure, which heavily impact on how you configure, develop and operate the app across hybrid environments.&lt;/li>
&lt;/ol>
&lt;h3 id="2-the-oam-way---an-app-centric-approach">2. The OAM Way - An App-centric Approach&lt;/h3>
&lt;ol>
&lt;li>Application first - define the app with a self-contained model, where operational behaviors as part of app definition, free of infrastructure here.&lt;/li>
&lt;li>Clarity and extensibility - an open standard to modularize platform capabilities into reusable pieces, assemble them into an app deployment per your own needs, fully self-service.&lt;/li>
&lt;li>Runtime agnostic - a consistent experience to deploy and operate your apps across on-prem clusters, cloud providers or even edge devices.&lt;/li>
&lt;/ol>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;blockquote>
&lt;p>&amp;ldquo;Developers think in terms of application architecture, not of infrastructure.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="images/introduction.png" alt="">&lt;/p>
&lt;h2 id="overview-of-the-model">Overview of the Model&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/oam-dev/spec/blob/master/2.overview_and_terminology.md">https://github.com/oam-dev/spec/blob/master/2.overview_and_terminology.md&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>This specification proposes a model that defines cloud native applications as follows:&lt;/p>
&lt;blockquote>
&lt;p>A cloud native application is a collection of interrelated, but discrete components (services, tasks, workers) that, when coupled with configuration and instantiated in a suitable runtime, together accomplish a unified functional purpose.&lt;/p>
&lt;/blockquote>
&lt;p>In current release, this application model defines the following:&lt;/p>
&lt;ul>
&lt;li>Components represents a runnable unit, together with a description (schematic).&lt;/li>
&lt;li>Workload types identify the different workloads that a component can execute.&lt;/li>
&lt;li>Traits are overlays that augment a component with additional operations-specific features. Traits represent operator concerns, not developer/software owner concerns.&lt;/li>
&lt;li>Application scopes represent application boundaries by grouping components with common properties or dependencies.&lt;/li>
&lt;li>An application configuration assembles a set of component instances, their traits, and the application scopes in which they are placed, combined with configuration parameters and metadata.&lt;/li>
&lt;/ul>
&lt;p>Thus, an application is a collection of components with a set of operational traits and scoped together into one or more application boundaries.&lt;/p>
&lt;h2 id="see-it-in-action">See it in action&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/oam-dev/kubevela">https://github.com/oam-dev/kubevela&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Topics: Engineering levels at Alibaba</title><link>/topics/engineering-management/engineering-ladders/engineering-levels-at-alibaba/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>/topics/engineering-management/engineering-ladders/engineering-levels-at-alibaba/</guid><description>
&lt;h2 id="put-together">Put together&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Engineering Ladder&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">Management Ladder&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>Level&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>Name&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>Level&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>Name&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P3&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P4&lt;/td>
&lt;td style="text-align:center">Junior engineer&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P5&lt;/td>
&lt;td style="text-align:center">Engineer&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P6&lt;/td>
&lt;td style="text-align:center">Advanced engineer&lt;/td>
&lt;td style="text-align:center">M1&lt;/td>
&lt;td style="text-align:center">Lead&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P7 (first terminal level)&lt;/td>
&lt;td style="text-align:center">Technical expert&lt;/td>
&lt;td style="text-align:center">M2&lt;/td>
&lt;td style="text-align:center">Manager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P8&lt;/td>
&lt;td style="text-align:center">Advanced technical expert&lt;/td>
&lt;td style="text-align:center">M3&lt;/td>
&lt;td style="text-align:center">Senior manager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P9 (second terminal level)&lt;/td>
&lt;td style="text-align:center">Senior technical expert&lt;/td>
&lt;td style="text-align:center">M4&lt;/td>
&lt;td style="text-align:center">Director&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P10&lt;/td>
&lt;td style="text-align:center">Researcher&lt;/td>
&lt;td style="text-align:center">M5&lt;/td>
&lt;td style="text-align:center">Senior director&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P11&lt;/td>
&lt;td style="text-align:center">Advanced researcher&lt;/td>
&lt;td style="text-align:center">M6&lt;/td>
&lt;td style="text-align:center">VP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P12&lt;/td>
&lt;td style="text-align:center">Senior researcher&lt;/td>
&lt;td style="text-align:center">M7&lt;/td>
&lt;td style="text-align:center">Senior VP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P13&lt;/td>
&lt;td style="text-align:center">Scientist&lt;/td>
&lt;td style="text-align:center">M8&lt;/td>
&lt;td style="text-align:center">Executive VP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">P14&lt;/td>
&lt;td style="text-align:center">Senior scientist&lt;/td>
&lt;td style="text-align:center">M9&lt;/td>
&lt;td style="text-align:center">Vice-Chairman&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">M10&lt;/td>
&lt;td style="text-align:center">Chairman&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Topics: Engineering levels at Carta</title><link>/topics/engineering-management/engineering-ladders/engineering-levels-at-carta/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>/topics/engineering-management/engineering-ladders/engineering-levels-at-carta/</guid><description>
&lt;p>At Carta, we follow Jim Barksdale’s &lt;a href="https://www.forbes.com/sites/michaellindenmayer/2014/03/07/4-hard-earned-lessons-from-ben-horowitz/">maxim&lt;/a>: “take care of the people, the products, and the profits…in that order.” We believe &lt;a href="https://www.forbes.com/sites/forbeshumanresourcescouncil/2021/05/05/three-ways-businesses-can-get-ahead-by-prioritizing-people/amp/">people &lt;em>are&lt;/em> the business&lt;/a>: building an environment where our engineers &lt;em>want&lt;/em> to come to work every day and know they can grow their careers is the best technical leverage we could hope for.&lt;/p>
&lt;p>To that end, having a fair, equitable, and &lt;em>clear&lt;/em> framework for leveling and career progression is one of our most important goals. Engineering leaders talk about levels and promotion processes a lot, but they focus more on the &lt;em>what&lt;/em> and not the &lt;em>why&lt;/em>. At Carta, we want everyone to understand how the company thinks about fairness and compensation, why our leveling processes exist, and what they’re trying to achieve.&lt;/p>
&lt;p>What follows is our internal engineering leveling guide, lightly edited for public consumption. We hope that by sharing it here we can help demystify some common questions about engineering career ladders and communicate our values to candidates and prospects alike.&lt;/p>
&lt;h1 id="our-system">Our system&lt;/h1>
&lt;p>Carta has eight full-time engineering levels, plus a separate level for interns. These levels are similar to the ones that exist at other comparable tech companies, but they’re not identical. It’s worth understanding them — and the way we assess them — as you think about your career.&lt;/p>
&lt;p>Writing down the precise requirements for what constitutes performance at a given level is tough. If the list is too general, it doesn’t give employees a clear picture of what they need to do to advance. If the list is too specific, it encourages employees to check boxes rather than focus on doing their job. The truth is, some boxes are important to check, but there is a degree of judgment that comes into leveling and promotion decisions. As the company matures, fine-tuning this balance — and fighting bias — only increases in importance.&lt;/p>
&lt;p>Fortunately, it’s easy to articulate the single most important thing for leveling: your &lt;strong>impact&lt;/strong> on the company. We can sum up the entire system by describing the (rough) impact we expect employees to have as they progress: on &lt;strong>tasks (L2)&lt;/strong>, on &lt;strong>features (L3)&lt;/strong>, on &lt;strong>problems (L4)&lt;/strong>, on teams (L5), on the &lt;strong>organization (L6)&lt;/strong>, on the &lt;strong>company (L7)&lt;/strong>, and on the &lt;strong>industry (L8)&lt;/strong>. You’ll note that this is not a linear progression, especially at the top of the range; moving the trajectory of the &lt;em>industry&lt;/em> is exponentially harder than moving the trajectory of the &lt;em>company&lt;/em>. This is why our levels aren’t linear, and neither is compensation.&lt;/p>
&lt;p>&lt;img src="images/1.png" alt="This graph shows the expected impact (on the y axis) plotted against our engineering levels (on the x axis), from L2 to L8. The curve of impact is roughly linear until Senior II (our L5): then it begins to increase exponentially.">&lt;/p>
&lt;h2 id="fairness">&lt;strong>Fairness&lt;/strong>&lt;/h2>
&lt;p>Leveling decisions can sometimes seem unfair, and fairness is one of Carta’s most important values. One important thing to understand is that levels are &lt;strong>conservative&lt;/strong> by default: Once we put someone in a level, the only practical way we can “take it back” is by managing the person out of the company, which is painful for both parties. So when we promote someone, we need to be sure that it’s the right decision; it’s better for everyone to have you perform solidly at L5 than to struggle at L6.&lt;/p>
&lt;p>Because levels are conservative, you’ll often hear managers say that promotions are a &lt;em>lagging&lt;/em> indicator of performance: You have to demonstrate that you’re performing at the next level, consistently, over a significant period of time. This can feel unfair — why am I delivering value at an L5 level and only getting paid like an L4? — until you remember that promoting you is a risk for the company, and since the company doesn’t want to make a mistake and lose you, they’re risk-averse. &lt;em>You&lt;/em> might be certain that you have all the skills of a senior engineer, but you have to convince the company that this is the case, lest we fall victim to &lt;a href="https://en.wikipedia.org/wiki/Peter_principle">the Peter principle&lt;/a> and promote people to their level of incompetence.&lt;/p>
&lt;p>This situation — when you &lt;em>know&lt;/em> you have the skill to operate at the next level, but the company doesn’t seem willing to recognize it — can be particularly frustrating. Sometimes this happens because you’re wrong, and you’ve misjudged your own abilities. But sometimes you’re right…and the company is, too. How? Because you don’t get promoted for your skill; you get promoted for your demonstrated &lt;strong>impact&lt;/strong> on the organization and the business. This impact can come in many forms, but you have to deliver. Your manager won’t hold shifting business priorities against you, but she can’t exactly give you “credit” for bad luck, either. In some sense, it doesn’t matter how “good” you are if the company doesn’t see the benefit of your talent and hard work. We can only reward progress, not activity.&lt;/p>
&lt;p>Another important thing to understand is that the way people are leveled in the organization won’t always feel “pairwise fair.” Sometimes you may think that you’re performing better than someone else in the organization who is a higher level. And sometimes you may be right. But it’s crucial to realize that making these kinds of comparisons will never help convince your manager to put you up for promotion. First, your assessment of your coworker is likely to be incomplete: You have full knowledge of your own work, but only a tiny window into that of your peers. But even if you’re right, someone else’s performance problem isn’t grounds for your promotion—imagine what would happen over time if we let the worst-performing employee in a level set the standard. Keep your focus on your accomplishments and the impact you’re driving for the company; don’t waste time and energy worrying about your coworkers.&lt;/p>
&lt;h2 id="compensation">&lt;strong>Compensation&lt;/strong>&lt;/h2>
&lt;p>Carta designs our compensation to align your impact and our goals as a company. The way we think about comp is that, with increasing seniority, salary increases about linearly, but equity compensation increases superlinearly (after the senior levels). At the early levels, your salary represents most of your overall compensation; at the highest levels, most of your comp comes from equity. Your salary might grow 3x over the course of your career, but your target equity compensation can grow 10x (or more, as the company grows).&lt;/p>
&lt;p>Because we base equity compensation on the value of the stock at the time it’s granted, in a high-growth world, longer-tenured junior people can end up with (much) larger equity grants than shorter-tenured senior ones. In a zero-sum world, this might rankle, but the more important point is that the value of your stock today might be one-tenth what it’s worth in five years, if we all do our jobs well.&lt;/p>
&lt;p>To set compensation at Carta, we use &lt;a href="https://carta.com/blog/introducing-carta-total-comp/">Carta Total Comp&lt;/a> to benchmark against public and private companies we compete with for talent. We design our salary bands so that when you join Carta, you’ll be making less in total compensation than you’d get if you joined a larger, later-stage, slower-growing company. But we expect you to make &lt;em>more&lt;/em> money than you would at a FAANG over time if Carta continues to execute well and grow.&lt;/p>
&lt;h2 id="career-progression">&lt;strong>Career progression&lt;/strong>&lt;/h2>
&lt;p>As you think about your career progression at Carta, one of the first things to know is that there’s a big discontinuity at &lt;strong>L5&lt;/strong>, which Carta considers its first &lt;strong>terminal&lt;/strong> level. &lt;strong>Prior to L5, we expect engineers at Carta to make “reasonable progress” along our bands&lt;/strong>; if you aren’t continuously learning, developing your skills, scaling your impact, and getting promoted every few years, your lack of progress will eventually become a performance issue. Once you get to L5, the situation changes. &lt;strong>After L5, further promotion is no longer “expected&amp;quot;&lt;/strong>, and no longer comes with a timeline. Being promoted beyond this level is &lt;em>extremely&lt;/em> difficult: most engineers won’t ever get there, and that’s perfectly okay.&lt;/p>
&lt;p>It’s also important to remember that, as you get more senior, it becomes more and more &lt;strong>your responsibility&lt;/strong> to own your career. Your manager is there to support you, give you guidance and advice, and help you capitalize on opportunities along the way, but &lt;em>you&lt;/em> are responsible for your trajectory.&lt;/p>
&lt;blockquote>
&lt;p>“Every promotion I’ve ever gotten has been me saying: I am operating at this level, I have done all of these things, I think I am ready for the next level, and here is why. Your contributions should never be ambiguous — document them! Make a list for yourself outside of work — about what you do, and how it impacts the company. Advocating for yourself isn’t arrogance: You are giving your manager details about things you are working on.”&lt;/p>
&lt;p>— &lt;a href="http://simpleleadership.io/the-importance-of-self-advocacy-with-arquay-harris/">&lt;em>Arquay Harris&lt;/em>&lt;/a>&lt;em>,&lt;/em> &lt;a href="https://www.linkedin.com/in/arquay">&lt;em>VP of Engineering&lt;/em>&lt;/a> &lt;em>at&lt;/em> &lt;a href="https://webflow.com/">&lt;em>Webflow&lt;/em>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>This advice is particularly important at fast-growing startups like Carta, where your manager may change a couple of times between one level and the next. Talk to your manager regularly about your career so that you understand the portfolio of work they’d need to see to support your promotion, and keep a record of your contributions (with documentation) so that it’s easy to explain what you’ve accomplished to people who don’t interact with you every day. When you get constructive feedback, document the feedback and what you do to address it over time. Think about the difference between going to your manager and saying “I want a promotion,” versus showing them a comprehensive written summary of your accomplishments and asking, “what else do I need to do to demonstrate that I’m performing at the next level?”&lt;/p>
&lt;h2 id="manager-vs-individual-contributor">&lt;strong>Manager vs. individual contributor&lt;/strong>&lt;/h2>
&lt;p>At Carta, engineering management and individual contributor are parallel tracks. Management is never a promotion from being an engineer, it’s a lateral move. The salary bands for managers and ICs are identical. You can make just as much money being a senior staff software engineer as you can being a director. Management can be an intensely rewarding career path, but it also comes with little glamour and much responsibility: choose it wisely!&lt;/p>
&lt;p>Since you can’t manage engineers if you don’t deeply understand the work they do, we expect everyone who makes the transition to management to reach at &lt;em>least&lt;/em> senior engineer I (L4) — and more often senior engineer II (L5) — before they do it. Many people who decide to become engineering managers stick with it once they’ve made the transition, but some managers eventually decide they’d be happier and more productive as ICs. Both of these transitions are perfectly okay.&lt;/p>
&lt;p>If you do decide to transition between tracks, your compensation won’t go down, but we &lt;em>may&lt;/em> drop you a level in the new track, depending on your recent experience (for example, an L6 engineer becoming a manager for the first time might start at M2 instead of M3 if they’ve never led a team before). This isn’t an insult: it’s a reflection of the fact that management and software engineering are different jobs that require different skills. Being good at one doesn’t automatically make you good at the other. If this happens to you, your manager will keep a close eye on your progress toward your next promotion, but expect a smaller compensation increase when it lands.&lt;/p>
&lt;p>One important difference between the individual contributor and management tracks is that &lt;strong>business need&lt;/strong> features much more prominently in a managerial career than it does for an IC software engineer. Carta doesn’t have quotas for IC levels, so if you deliver a ton of disproportionate value in a very short period of time, the company can respond to recognize that value quickly. To move up as a manager, on the other hand, you have to have &lt;em>both&lt;/em> a demonstrated track record of achievement &lt;em>and&lt;/em> there must exist a clear business need for a manager at that level in the organization. This dependency on the business can be frustrating when it feels like it’s gating your career advancement, but it’s a wind that blows both ways. People need managers, so if you’re the best person to step into an opening, you might get a shot at more responsibility quickly.&lt;/p>
&lt;p>A last point on management career trajectory is that &lt;strong>headcount&lt;/strong> is a &lt;a href="https://tim.blog/2009/05/19/vanity-metrics-vs-actionable-metrics/">vanity metric&lt;/a>. If you’re optimizing for the number of people you manage, or trying to build and define the bounds of your personal empire, you’re optimizing for the wrong things. &lt;a href="https://firstround.com/review/give-away-your-legos-and-other-commandments-for-scaling-startups/">Give away your Legos&lt;/a> as fast as possible and focus on scaling up the &lt;em>impact&lt;/em> your team has. Delivering $10 million of value with a team of four people is much more impressive than doing it with a team of thirty.&lt;/p>
&lt;h2 id="the-individual-contributor-levels">&lt;strong>The individual contributor levels&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>Associate software engineer (L1)&lt;/strong> is Carta’s entry-level for engineers. This is where we level recent coding bootcamp graduates, and where we transfer employees who want to give engineering a try without any formal job experience. Some of our competitors don’t have a level analogous to our L1 because they don’t hire software engineers who don’t have a four-year degree in computer science (or equivalent work experience)—but much of Carta was built by people with nontraditional backgrounds, so we think it’s important to be a place that supports smart, determined people who want to transition into engineering.&lt;/p>
&lt;p>&lt;strong>L1&lt;/strong> is a learning level, which means the primary focus is not on producing value for Carta—it’s learning all the things you need to know to be able to produce value in the future. The goal for an L1 engineer is to be able to write small, tightly scoped pieces of code; understand how Carta’s codebase and systems work; and deepen your understanding of fundamental computer science concepts like programming languages, algorithmic complexity, and abstract data structures. If you’re hired at Carta at L1, we expect you to progress out of the level in a year or two.&lt;/p>
&lt;p>&lt;strong>Software engineer I (L2)&lt;/strong> is Carta’s new-grad level. This is where almost all recent graduates of traditional four-year computer science degree programs will start. At L2, we expect you to know the basics of software engineering cold, be able to independently solve tightly scoped tasks with some supervision from more senior engineers, and understand your part of our business well. At L2, you’re learning rapidly, but also driving business impact. We expect you to progress out of the L2 level in about a year or two.&lt;/p>
&lt;p>&lt;strong>Software engineer II (L3)&lt;/strong> is Carta’s last non-senior level, and the level where we hire new-grad MS/PhDs, most college grads who are a few years out of school, and a &lt;em>very&lt;/em> small number of truly exceptional new grads (from highly competitive programs who’ve already shipped meaningful features to production at several previous internships). Here, you should demonstrate mastery over the fundamentals of computer science, be comfortable implementing and shipping end-to-end features, and start to understand the deeper problems in your part of the business. We expect you to progress out of the L3 level within two years.&lt;/p>
&lt;p>&lt;strong>Senior software engineer I (L4)&lt;/strong> is the first of Carta’s two senior levels. This is the first inflection point where leadership starts to feature as a defining requirement: Your job is no longer just to get things done, it’s to guide others to help them deliver value, too. At this level, your total mastery of foundational computer and software engineering concepts is taken as a given, and we expect you to start mentoring more junior engineers and pitching in on interviewing. This is also the first level where you’re expected to do more than merely complete the work that’s been assigned to you: At L4, you should start to create your &lt;em>own&lt;/em> work by understanding the problems your team faces and proposing, implementing, and delivering solutions to them. If you want to make the jump to manager, we expect you to reach at least L4 before you do it. Carta expects you to progress out of the L4 level in a few years.&lt;/p>
&lt;p>&lt;strong>Senior software engineer II (L5)&lt;/strong> is the second of Carta’s two senior levels, our first terminal level, and by far the hardest promotion to achieve up to this point in the career ladder. At L5, we expect you to know everything you need to know to be a professional software engineer: You should have acquired all the technical and leadership skills you need to land a job at any other top-tier tech company. L5 engineers must have demonstrated technical breadth &lt;em>and&lt;/em> depth. You should be an expert in your part of the business, a strong communicator, a trusted mentor, a role-model for more junior engineers, a driver of best practices for hiring and interviewing, and have delivered multiple projects that move the needle for your team. At L5, your job starts to become just as much about exercising technical &lt;em>judgment&lt;/em> as it does about implementation. Once you hit L5, there’s no longer a default expectation that you’ll eventually be promoted, so you can stay at this level indefinitely.&lt;/p>
&lt;p>&lt;strong>Staff software engineer (L6)&lt;/strong> is the next inflection point in our levels, and an even harder promotion to achieve than L5. At L6, you’re expected to solve problems and deliver solutions that impact the engineering organization as a whole. Your manager might occasionally point you in the general direction of a project, but everything after that is you: identifying and formalizing the problem, devising a solution, leading its implementation, and training the rest of the organization to leverage it. At this level, you’re expected to have the knowledge, judgment, and understanding to work cross-functionally with your business and product partners to make decisions about your business unit’s roadmap. You are capable of mentoring anyone, including your more senior counterparts, in your particular areas of expertise. Staff engineers are expected to be a force multiplier for any project upon which they are deployed, and to make the entire engineering organization better.&lt;/p>
&lt;p>&lt;strong>Senior staff software engineer (L7)&lt;/strong> is the highest level even most “great” software engineers will ever achieve in their career. At L7, you are expected to deliver value that materially changes outcomes for the company, and your job is not just about your superior technical judgment but your ability to &lt;em>influence&lt;/em> others to deliver results. You are an authority on more than one technical area, and you’re comfortable inventing novel technologies that do not exist yet to solve problems. Senior staff engineers, in particular, must be unimpeachable role models at Carta.&lt;/p>
&lt;p>&lt;strong>Principal software engineer (L8)&lt;/strong> is the final engineering level at Carta (for now). At this level, you have a demonstrated ability to deliver software that changes the trajectory of the industry. You are recognized as a thought leader outside the company. There are not many principal engineers in the industry.&lt;/p>
&lt;h2 id="the-manager-levels">&lt;strong>The manager levels&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>Tech lead manager (M1)&lt;/strong> is Carta’s first manager level: the equivalent of an L4 engineer on the management track. At M1, we expect you to split your time between hands-on technical work and people management for a small team of engineers. The predominant focus at this level is mentorship, technical planning, resource allocation, and project delivery. The difference between M1 and being an IC technical lead on a team is small by design; this level is a low-risk way for an engineer to decide whether people management is the right path for them. TLM is the only non-terminal manager level at Carta. We expect you to progress out of M1 in a year or two.&lt;/p>
&lt;p>&lt;strong>Engineering manager (M2)&lt;/strong> is the first manager level where we expect people management to be the majority of your focus, although at M2 it’s likely that you’re still writing and reviewing code a substantive minority of the time. Engineering managers generally lead a single, larger team that is responsible for multiple projects, drive all the hiring and interviewing for it, mentor and guide the career development of their direct reports, and work closely with their product partners to prioritize and scope work. Like its IC equivalent, senior engineer II (L5), M2 is the first terminal manager level: Once you reach it, there’s no longer an expected timeline for any subsequent promotions.&lt;/p>
&lt;p>&lt;strong>Senior engineering manager (M3)&lt;/strong> is an inflection point in your management career, where you generally start to manage other engineering managers or TLMs, and you likely relinquish personal &lt;em>ownership&lt;/em> of code (although it’s expected that you stay embroiled in the details of your team’s projects, and still do some technical work yourself). Like L6 on the IC track, at M3 you’re self-directed, working cross-functionally with stakeholders across the business, delivering work that impacts the engineering organization as a whole, and driving your part of your BU’s roadmap.&lt;/p>
&lt;p>&lt;strong>Director (M4)&lt;/strong> is the management equivalent of a senior staff (L7) engineer. At the director level, your teams are expected to deliver a portfolio of work that moves the needle on the trajectory of the company. You are a deep technical expert in multiple parts of our business, driving continuous improvements to our hiring and recruiting processes, proactively looking for opportunities to create inordinate value that are not obvious to other stakeholders, and capable of resourcing, planning and strategizing with your teams to solve business and technical problems at scale for which solutions are not already known. M4 managers must be role models for the entire organization.&lt;/p>
&lt;p>&lt;strong>Senior director (M5)&lt;/strong> is an executive role and the managerial equivalent of a principal (L8) engineer. A senior director’s primary focus is on strategic thinking and execution. They are able to identify new, material opportunities for the company, plan and resource to tackle them, execute against that plan, and deliver value to both internal and external stakeholders. M5 managers are experts at managing to results and organizational alignment.&lt;/p>
&lt;p>&lt;strong>VP (M6)&lt;/strong> is an executive role, usually leading an entire scaled business unit or a mission-critical cross-functional organization. Your primary stakeholders are C-suite executives. You’re actively involved in setting the strategic direction of the company &lt;em>and&lt;/em> held directly accountable for the performance of your entire org.&lt;/p>
&lt;h2 id="put-together">Put together&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Engineering Ladder&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">Management Ladder&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>Level&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>Name&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>Level&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>Name&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L2&lt;/td>
&lt;td style="text-align:center">Software engineer I&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L3&lt;/td>
&lt;td style="text-align:center">Software engineer II&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L4&lt;/td>
&lt;td style="text-align:center">Senior software engineer I&lt;/td>
&lt;td style="text-align:center">M1&lt;/td>
&lt;td style="text-align:center">Tech lead manager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L5 (first terminal level)&lt;/td>
&lt;td style="text-align:center">Senior software engineer II&lt;/td>
&lt;td style="text-align:center">M2&lt;/td>
&lt;td style="text-align:center">Engineering manager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L6&lt;/td>
&lt;td style="text-align:center">Staff software engineer&lt;/td>
&lt;td style="text-align:center">M3&lt;/td>
&lt;td style="text-align:center">Senior engineering manager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L7&lt;/td>
&lt;td style="text-align:center">Senior staff software engineer&lt;/td>
&lt;td style="text-align:center">M4&lt;/td>
&lt;td style="text-align:center">Director&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">L8&lt;/td>
&lt;td style="text-align:center">Principal software engineer&lt;/td>
&lt;td style="text-align:center">M5&lt;/td>
&lt;td style="text-align:center">Senior director&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">M6&lt;/td>
&lt;td style="text-align:center">VP&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Topics: Internal Platform Teams - What Are They and Do You Need One</title><link>/topics/platform-engineering/internal-developer-platform-idp/internal-platform-teams-what-are-they-and-do-you-need-one/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>/topics/platform-engineering/internal-developer-platform-idp/internal-platform-teams-what-are-they-and-do-you-need-one/</guid><description>
&lt;p>The early 2000s, the era of the SysAdmin. They were the ultimate rulers of the infrastructure, the gatekeepers of any setup. If your app developers wanted anything done, they needed to pass through them. Specifically, this meant every script and piece of code was thrown over the fence to SysAdmins to figure out what to do with it and how to deploy it. Not a great experience on either side of the fence. Then 2007 came and Werner Vogels &lt;a href="https://queue.acm.org/detail.cfm?id=1142065">famously yelled&lt;/a>: “You build it, you run it”. And a whole generation of SysAdmins was fired. Cloud native was finally allowing developers to provision the resources they needed, whenever they needed them. The answer to every dev teams’ problems. Or was it?&lt;/p>
&lt;p>While it did bring about a plethora of improvements around scalability, availability and ease of operation, it turns out Cloud native also meant things got a lot more complicated. As every company’s value proposition becomes digitized (&lt;a href="https://www.youtube.com/watch?v=ZAKn9qkYEwU&amp;amp;t=1978s">as Twilio’s CEO explains&lt;/a>), the degree of complexity of its systems grows exponentially. They suddenly need to integrate with countless new technologies, be deployed across multiple clusters and vendors in different regions, all while offering an effortless end experience to customers. The result of all of this is that your frontend app developers are completely overwhelmed by the sheer amount of tools that make up your infrastructure. And whenever they are supposed to be using those YAML files for their deployments, they end up going to your Ops team to ask for help. So much for “you build it, you run it”.&lt;/p>
&lt;h2 id="the-key-to-true-devops">The key to true DevOps&lt;/h2>
&lt;p>Once they realized this approach to DevOps just wasn’t going to scale the way they needed it to, top-tier engineering organizations started looking at alternative solutions. In order to grow rapidly, while keeping their systems reliable and maintainable, and without compromising their developers' end experience of working with the infrastructure, leading tech organizations introduced Internal Platform teams.&lt;/p>
&lt;p>Platform teams build internal workflows and tooling, such as &lt;a href="https://humanitec.com/blog/what-is-an-internal-developer-platform">Internal Developer Platforms (IDPs)&lt;/a>, to ensure application developers are shielded from the evolving complexities of the underlying infrastructure. They create a smooth development and deployment experience for everyone involved.&lt;/p>
&lt;p>The common thread in everything they do: enable developer self-service across the organization. As Skelton and Pais explain in &lt;a href="https://teamtopologies.com/book">Team Topologies&lt;/a>,&lt;/p>
&lt;p>“The Platform team’s knowledge is best made available via self-service capabilities via a web portal and or/programmable API [i.e. an IDP] (as opposed to lengthy instruction manuals)”.&lt;/p>
&lt;p>&lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">The 2020 State of DevOps report by Puppet&lt;/a> clearly surfaces this by mapping the level of DevOps sophistication against the use of self-service platforms built by Platform teams.&lt;/p>
&lt;p>&lt;img src="images/1.png" alt="1">&lt;/p>
&lt;p>Source: &lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">2020 State of DevOps report by Puppet&lt;/a>&lt;/p>
&lt;p>Jason Warner, CTO at GitHub, &lt;a href="https://humanitec.com/blog/jason-warner-why-github-built-their-own-internal-developer-platform">explained in his interview with us&lt;/a> how building their platform team and their IDP wasn’t really a cosmetic choice but rather a vital move on their part, which allowed GitHub to scale the way they did. Jan Löffler, Head of Platform at Zalando (largest e-commerce in Germany), &lt;a href="https://humanitec.com/blog/why-zalando-builds-an-own-developer-platform">agrees that an Internal Platform team&lt;/a>, in combination with an Internal Developer Platform, is an essential component of what makes such a large organization function and ship software so much faster than a regular team.&lt;/p>
&lt;h2 id="impressive-impact">Impressive impact&lt;/h2>
&lt;p>The strategic focus on Platform teams and developer self-service in these elite organizations clearly pays off. The results of well-trimmed Internal Platform teams are quite astounding: top performers deploy a stunning 208 times more frequently than low performers. &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf">The 2019 Accelerate State of DevOps Report&lt;/a> shows very interesting data on the top percentile teams:&lt;/p>
&lt;p>&lt;img src="images/2.png" alt="02">&lt;/p>
&lt;p>Source: &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf">2019 Accelerate State of DevOps Report&lt;/a>&lt;/p>
&lt;p>While these “elite performers” only make up for a fraction of the market, this trend is catching the attention of many others. According to the &lt;a href="https://www.gartner.com/en/documents/3906678/how-to-scale-devops-by-building-platform-teams">2019 Gartner DevOps report&lt;/a>, IDPs and Platform teams are increasingly the go-to approach to solve problems holistically and handle multiple teams and applications, instead of just the projects at hand. According to this report, 60% of surveyed teams are currently embarking onto the platform journey.&lt;/p>
&lt;p>We have already written at length about &lt;a href="https://humanitec.com/blog/the-rise-of-internal-developer-platforms">the rise of Internal Developer Platforms&lt;/a> in the industry and &lt;a href="https://humanitec.com/blog/what-is-an-internal-developer-platform">what they are&lt;/a>. A match made in DevOps heaven, IDPs are the indispensable companion of any Platform team. Together, they provide app developers with the best tools and workflows to do their job as efficiently and effortlessly as possible.&lt;/p>
&lt;p>&lt;strong>In this article&lt;/strong>, we will dive deeper into the Platform team side of things: the different aspects of building and scaling one, while ensuring that it continuously generates value for all your app dev teams.&lt;/p>
&lt;h2 id="how-to-build-an-internal-platform-team">How to build an Internal Platform team&lt;/h2>
&lt;p>Alright, Internal Platform teams are pretty damn important when your organization is scaling up. And if that’s you, right now you might be thinking to yourself you need one. So where do you start?&lt;/p>
&lt;h3 id="the-mission">The mission&lt;/h3>
&lt;p>As usual, from the why. When building an Internal Platform team, it is key you clearly define its purpose and mission. “To build the tools (IDPs) that enable developers to shio scalable applications with high speed, quality and performance” is an example. Whatever makes the most sense for your organization, make sure you set this in stone. Along with the mission statement, it is important you establish early on that the Platform team is not to be seen as some sort of extension of the SRE or Ops teams, but rather as its own product team, serving customers (app developers) within your organization.&lt;/p>
&lt;p>This differentiation is crucial not only from an engineering and product point of view, but also from a management perspective. In order to get buy-in on different levels, Platform teams cannot afford to be speaking only the technical language, but need to master the business lingo too. It is critical for the long term success of any Internal Platform team that it gets seen within the organization as not yet another cost center we are adding to our already expensive engineering balance sheet. Instead, it is a value center for all other app development teams and, eventually, for the end consumer.&lt;/p>
&lt;h3 id="internal-balance">Internal balance&lt;/h3>
&lt;p>Once that is cleared up, you need to strike the right balance. Successful Internal Platform teams manage to put in place strong guardrails and standards for their development teams, but without taking away too much of their autonomy. To have meaningful impact, Platform teams depend on having standards in their organization. Trying to support every possible programming language, framework, DB, and whatever exotic tech engineers like that month only results in Platform teams spreading themselves too thin. On the flip side, you don’t want to come across as a patronizing ruler of infrastructure by imposing your standards on every other team. &lt;a href="https://humanitec.com/blog/devops-standards-vs-freedom">Standards vs. freedom&lt;/a> is a complex topic we have covered before. There’s no one-size-fits-all solution here, but you have to be mindful of the challenges of introducing a centralized set of standards in your organization.&lt;/p>
&lt;p>Finally, ensure you select the right SREs and DevOps engineers to build out your team. This sounds obvious, but there’s quite some &lt;a href="https://www.reddit.com/r/sre/comments/m12sdl/becoming_a_platform_engineer/">debate around what makes for a good Platform engineer&lt;/a>. It is paramount he or she fully appreciates internal tooling as a real product to iterate on, based on the feedback of their end customer: the rest of the engineering teams. Deep technical capabilities like language skills are key for a Platform engineer, but make sure you don’t only consider technical sophistication when hiring for this position, also look for candidates with a multidisciplinary understanding of their role within the organization. Alongside these core Ops competencies, you’ll also need front-end and design roles to build a complete Platform team. Remember, they are building a full fledged product for your organization.&lt;/p>
&lt;h3 id="the-values-of-platform-teams">The value(s) of Platform teams&lt;/h3>
&lt;p>Congratulations, you convinced management to give you the green light and went off to build a world class Internal Platform team. So how do you make sure it was all worth it? At the end of the day, they are not shipping anything that’s customer facing, so how do you know they are working on the right things to maximize value for the rest of the engineering org?&lt;/p>
&lt;p>We compiled the key areas that we have seen Internal Platform teams focus on, in order to deliver the right internal tooling, standards and workflows to their application developers. The cornerstone is always the reduction of complexity and cognitive load for the end user of the Internal Developer Platform. If that is unstable, your engineering productivity will drop dramatically. But let’s get into the details.&lt;/p>
&lt;h3 id="treat-your-platform-as-a-product">Treat your platform as a product&lt;/h3>
&lt;p>We mentioned this already, but it is probably the most important takeaway: your Internal Platform team needs to be driven by a &lt;a href="https://martinfowler.com/articles/talk-about-platforms.html">product mindset&lt;/a>. They need to focus on what provides real value (as opposed to what is “cool” to work on) for their internal customers, the app developers, based on the feedback they gave them. This philosophy needs to be drilled into every aspect of your Platform team’s activities. Iterate on your Internal Developer Platform, ship new features. At the same time, don’t forget you are also responsible for maintaining a reliable and scalable Ops setup. If something goes wrong in your team, all other teams will suffer from it.&lt;/p>
&lt;p>&lt;img src="images/3.png" alt="3">&lt;/p>
&lt;p>Source: &lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">2020 State of DevOps report by Puppet&lt;/a>&lt;/p>
&lt;h3 id="optimize-iteration-speed">Optimize iteration speed&lt;/h3>
&lt;p>When you think about it, the speed at which your organization innovates is directly correlated to (and constrained by) your iteration speed. Increase that, and your app developers will be able to consistently ship more features and products to your customers, confident that things won’t break.&lt;/p>
&lt;p>In order to do so, Internal Platform teams need to focus on optimizing every step of the software delivery process. In particular, they should:&lt;/p>
&lt;ul>
&lt;li>Make local development and testing as fast and painless as possible&lt;/li>
&lt;li>Critically simplify the way developers interact with their infrastructure (and remove the &lt;a href="https://humanitec.com/blog/tame-your-zoo-of-scripts">zoo of scripts&lt;/a> from their day to day)&lt;/li>
&lt;li>Lower barrier to entry by building the right tools and documentation that enable engineers to onboard faster. You should move away from tribal knowledge as much as you can.&lt;/li>
&lt;/ul>
&lt;h3 id="solve-common-problems">Solve common problems&lt;/h3>
&lt;p>A good Platform team prevents other teams from reinventing the wheel by solving common problems time and again. It’s key to figure out what these common problems are: start by understanding developer pain points and friction areas that cause slowdowns in development. You can gather this information both qualitatively through developers’ feedback and quantitatively via engineering KPIs. This intel, combined with an understanding of the future direction of the product, can help the Internal Platform team shape a good roadmap and pick the right battles to fight. The Puppet report gives us some insights on what the core responsibilities of Platform teams are.&lt;/p>
&lt;p>&lt;img src="images/4.png" alt="4">&lt;/p>
&lt;p>Source: &lt;a href="https://puppet.com/resources/report/2020-state-of-devops-report/">2020 State of DevOps report by Puppet&lt;/a>&lt;/p>
&lt;h3 id="be-glue-my-friend">Be glue, my friend&lt;/h3>
&lt;p>Platform teams need to define a golden path for their developers: a reduced set of sane, proven choices of tools that get the job done and allow you to build, deploy, and operate your services. Once you have defined this path, the main value you create as an Internal Platform team is to be the sticky glue that brings all the tools together and ensures a smooth development and deployment experience for your engineers.&lt;/p>
&lt;p>It’s important you don’t go to war with commercial vendors. It doesn’t matter if your homegrown CI/CD solution is superior today. AWS, GCP, Humanitec will catch up, faster than expected, and make that tool and team redundant. Every Platform team should be asking themselves: what is our differentiator? Instead of building in-house alternatives to a CI system, a CD tool or a metrics platform and compete against businesses that have 20 or 50 times your capacity, focus on the specific needs of your teams and tailor off-the-shelf solutions to your requirements. Commercial competitors are more likely to optimize for more generic needs of the industry anyway.&lt;/p>
&lt;p>&lt;img src="images/5.png" alt="5">&lt;/p>
&lt;h3 id="educate-and-empower-your-teams">Educate and empower your teams&lt;/h3>
&lt;p>Finally, a good Platform team is a central source of education and best practices for the rest of the company. Some of the most impactful activities we saw elite teams routinely perform in this area include:&lt;/p>
&lt;ul>
&lt;li>Fostering regular architectural design reviews for new functional projects and proposing common ways of development across dev teams.&lt;/li>
&lt;li>Sharing knowledge, experiences and collectively define best practices and architectural guidelines.&lt;/li>
&lt;li>Ensuring engineers have the right tools in place to validate and check for common pitfalls like code smells, bugs and performance degradations.&lt;/li>
&lt;li>Organizing internal hackathons so dev teams can surface their requirements for internal tooling needs. Nigel Simons (Director Enterprise Tech at a Fortune 100) explained in a &lt;a href="https://humanitec.com/blog/developer-experience-roundtable-continuous-improvement-nigel-simpson-erik-muttersbach">conversation with us&lt;/a> that 50% of their teams’ hackathon ideas actually make it to production.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>If you and your team are scaling up your infrastructure and adding engineers at an increasing pace, you are likely considering (or hopefully will consider, after reading this) to build an Internal Platform team. The benefits can be many and if done right, a Platform team can allow your organization to scale considerably faster and more efficiently than with a less standardized approach and product driven mentality.&lt;/p></description></item><item><title>Topics: Backend as a Service - What is a BaaS</title><link>/topics/backend-as-a-service-baas/backend-as-a-service-what-is-a-baas/</link><pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate><guid>/topics/backend-as-a-service-baas/backend-as-a-service-what-is-a-baas/</guid><description>
&lt;h2 id="what-is-a-backend-as-a-service">What is a backend as a service?&lt;/h2>
&lt;p>&lt;img src="images/0.png" alt="0">&lt;/p>
&lt;p>A BaaS or mBaaS or Backend as a Service is a platform that automates backend side development and takes care of the cloud infrastructure. Using a BaaS, you will outsource the responsibilities of running and maintaining servers to a third party and focus on the frontend or client-side development.&lt;/p>
&lt;p>On top of that, a BaaS will provide tools to help you create a backend code and speed up the development process. It has ready to use features like scalable databases, APIs, cloud code functions, social media integrations, file storage, and push notifications.&lt;/p>
&lt;h3 id="frontend-vs-backend">Frontend vs. Backend&lt;/h3>
&lt;p>&lt;img src="images/1.png" alt="1">&lt;/p>
&lt;p>First things, first! Here is a simple explanation of the differences between the frontend and backend.&lt;/p>
&lt;ul>
&lt;li>Frontend: Every software application has a section that the user sees that is called the frontend.&lt;/li>
&lt;li>Backend: There is also a part that the user does not see that is named backend. These two portions combine through APIs.&lt;/li>
&lt;/ul>
&lt;p>Please refer to Wikipedia know more about Frontend vs. Backend.&lt;/p>
&lt;h3 id="baas-vs-custom-backend">BaaS vs. Custom Backend&lt;/h3>
&lt;p>For every app you build, there is a choice to develop it, creating a custom backend, or using a BaaS framework. Let’s understand the difference between these two approaches.&lt;/p>
&lt;p>Going for a custom backend, you will have to create your backend from scratch and handle the infrastructure. The pros of this approach are the flexibility it provides and customization possibilities. The downsides will be higher development costs and a longer time to market.&lt;/p>
&lt;p>On the other hand, a BaaS will deliver ready to use building blocks and code generation tools. The advantages of this approach are a much faster development process and reduced time to market. The cons will be lower flexibility and following a standardized architecture.&lt;/p>
&lt;p>The following examples will help you to understand the differences between custom coding and using a BaaS.&lt;/p>
&lt;h4 id="example-01--baas-vs-aws-ec2-instances">Example 01 – BaaS vs. AWS EC2 Instances&lt;/h4>
&lt;p>Imagine you would like to build a new software project and that you will not use a BaaS. The first step before you start developing the backend side code is to set up the servers. Here is how it will work:&lt;/p>
&lt;ul>
&lt;li>Login on AWS or any other cloud.&lt;/li>
&lt;li>Go to Instances&lt;/li>
&lt;li>Launch Instance&lt;/li>
&lt;li>Select the Operating System&lt;/li>
&lt;li>Instance Size, Type&lt;/li>
&lt;li>Configure Instance Details
&lt;ul>
&lt;li>Number of instances&lt;/li>
&lt;li>Network&lt;/li>
&lt;li>IP&lt;/li>
&lt;li>Monitoring&lt;/li>
&lt;li>Other settings like Auto Scaling, IAM, etc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Add Storage&lt;/li>
&lt;li>Security Settings&lt;/li>
&lt;/ul>
&lt;p>All right, your instance is up and running, and now you can start coding! Not really! That is only the first step of the process, and you will still need to install the web-server, database, framework, etc. After all that is done, you can start coding. The time to perform this process can range from a few hours (for a small project with skilled backend developers) to more than a day for large environments.&lt;/p>
&lt;p>This same process using a backend as a service will be done with a few clicks and take no more than a few minutes.&lt;/p>
&lt;h4 id="example-02--baas-vs-custom-coding-login-feature">Example 02 – BaaS vs. Custom coding Login feature&lt;/h4>
&lt;p>Imagine that after your server setup is ready and you want to develop your application’s first feature. Let’s consider the first feature you will code is a social login to Facebook. I will assume outsourcing development to an offshore company, which will cost $25/hour. This simple task will take around 16 hours and cost $400.&lt;/p>
&lt;p>On the other hand, using a BaaS will allow you to implement the same feature in less than one hour. You will have a saving of 15 hours and $375. Not bad for a simple task implementation!&lt;/p>
&lt;h4 id="example-03--gdpr-security-settings">Example 03 – GDPR security settings&lt;/h4>
&lt;p>GDPR privacy requirements are pretty complicated, and the implementation will demand a lot of engineering effort. The requirements will range from implementing HTTPS for transit data to encrypt server-side data in rest (and several other conditions). The exact amount of engineering hours to fulfill all the elements will depend on the project’s size and complexity, but can easily surpass 100 hours of implementation.&lt;/p>
&lt;p>Outsourcing this implementation to a backend as a service company makes sense, especially for small to medium projects. Because the backend platforms can dilute the investment made to implement GDPR settings among hundreds or thousands of apps, the stake per app will be minimal. A company with a single project will have to offset all the investments under only one application. Even if the app is successful, it will demand much more time to return the investment.&lt;/p>
&lt;h3 id="baas-vs-mbaas">BaaS vs. MBaaS&lt;/h3>
&lt;p>BaaS and MBaaS are pretty much the same things! You can use a backend as a service for web projects or mobile projects. It’s recognized as a mobile backend as a service (MBaaS) or mobile BaaS when used for mobile development.&lt;/p>
&lt;p>Why use a backend as a service?
A BaaS platform will help you to solve two problems:&lt;/p>
&lt;p>Manage and scale cloud infrastructure
Speed up backend development
There are many benefits of using a BaaS cloud, and the reasons to use a backend as a service classifies into business and technical aspects.&lt;/p>
&lt;h2 id="why-use-a-backend-as-a-service">Why use a backend as a service?&lt;/h2>
&lt;p>A BaaS platform will help you to solve two problems:&lt;/p>
&lt;ul>
&lt;li>Manage and scale cloud infrastructure&lt;/li>
&lt;li>Speed up backend development&lt;/li>
&lt;/ul>
&lt;p>There are many benefits of using a BaaS cloud, and the reasons to use a backend as a service classifies into business and technical aspects.&lt;/p>
&lt;h3 id="business-reasons-to-use-a-baas">Business reasons to use a BaaS&lt;/h3>
&lt;p>The business advantages of a backend as a service are mainly related to productivity gains and outsourcing cloud management responsibilities. In particular, for small to medium size projects, you will have substantial benefits using a backend platform. The math is pretty simple; a backend/infrastructure engineer will cost around $80k/year in the USA. Outsourcing part of the work to a third party will allow offsetting this cost.&lt;/p>
&lt;p>The other advantage is delivering faster time to market to a software project. Waiting for several months to provide a software product will kill the market opportunity or make you start behind the competition. So, the business advantages of a BaaS are:&lt;/p>
&lt;ul>
&lt;li>Reduce time to market&lt;/li>
&lt;li>Save money and decrease the cost of development&lt;/li>
&lt;li>Assign fewer backend developers to a project (same results with fewer developers)&lt;/li>
&lt;li>Outsource cloud infrastructure management&lt;/li>
&lt;/ul>
&lt;h3 id="technical-reasons-to-use-a-baas">Technical reasons to use a BaaS&lt;/h3>
&lt;p>Good backend developers are difficult to find and are well-paid professionals. If you find one of them, make sure you use their time wisely and ask them to deliver high-value code. Programming, repetitive activities, and boilerplate code is a waste of time and money. So, it has to be avoided.&lt;/p>
&lt;p>The other advantage of a backend service is that it will let your frontend developers concentrate on what they are best at. That is, delivering frontend code and excellent usability for your application. So, the technical advantages of a BaaS are:&lt;/p>
&lt;ul>
&lt;li>Focus on frontend development&lt;/li>
&lt;li>Excludes redundant stack setup&lt;/li>
&lt;li>No need to program boilerplate code&lt;/li>
&lt;li>Standardize the coding environment&lt;/li>
&lt;li>Let backend developers program high-value lines of code&lt;/li>
&lt;li>Provides ready to use features like authentication, data storage, and search&lt;/li>
&lt;li>Let you clone apps and run testing environments&lt;/li>
&lt;li>Focus on coding business logic rather than boiler plate code&lt;/li>
&lt;li>Has ready to use security settings and backup procedures&lt;/li>
&lt;/ul>
&lt;h2 id="when-to-use-a-backend-as-a-service">When to use a backend as a service?&lt;/h2>
&lt;p>Here are three everyday use cases for using a backend as a service platform:&lt;/p>
&lt;ul>
&lt;li>Making an MVP – Minimum Viable Product&lt;/li>
&lt;li>Stand-alone apps or applications that require a small number of integrations&lt;/li>
&lt;li>Enterprise apps that are not mission-critical&lt;/li>
&lt;/ul>
&lt;p>For these cases, using a BaaS is a no-brain and will save you a lot of time and money.&lt;/p>
&lt;h3 id="advantages-and-disadvantages-of-a-baas">Advantages and Disadvantages of a BaaS&lt;/h3>
&lt;p>Here are the pros and cons of using a backend as a service.&lt;/p>
&lt;p>Advantages of a Backend as a Service&lt;/p>
&lt;ul>
&lt;li>Development speed – It’s super fast&lt;/li>
&lt;li>Development price – It’s really cheap&lt;/li>
&lt;li>It’s serverless, and you don’t need to manage infrastructure&lt;/li>
&lt;/ul>
&lt;p>To know all the benefits of using a BaaS, please read: BaaS – 22 Benefits &lt;a href="https://blog.back4app.com/2019/10/24/what-are-the-benefits-baas-backend-as-a-service/">https://blog.back4app.com/2019/10/24/what-are-the-benefits-baas-backend-as-a-service/&lt;/a> you will enjoy&lt;/p>
&lt;h3 id="disadvantages-of-a-backend-as-a-service">Disadvantages of a Backend as a Service&lt;/h3>
&lt;ul>
&lt;li>Less flexibility in comparison to custom coding&lt;/li>
&lt;li>A lower level of customization in comparison to a custom backend&lt;/li>
&lt;li>Vendor lock-in for closed source platforms&lt;/li>
&lt;/ul>
&lt;h2 id="iaas-x-paas-x-baas">IaaS x PaaS x BaaS&lt;/h2>
&lt;p>Every time you move from IaaS to PaaS and from PaaS to BaaS, you add layers of service (or segments of value) to your application. Here is a simple overview:&lt;/p>
&lt;ul>
&lt;li>IAAS = Data Center + Servers + Storage +Networking&lt;/li>
&lt;li>PAAS = IAAS + Deploy + Manage + Scale&lt;/li>
&lt;li>BAAS = PAAS + Features to Build Backend&lt;/li>
&lt;/ul>
&lt;h2 id="what-features-have-a-backend-as-a-service">What features have a backend as a service?&lt;/h2>
&lt;p>A backend as a service will provide you with features that can be deployed across all types of applications. Here are the most common features of a backend as a service.&lt;/p>
&lt;ul>
&lt;li>Scalable Database (NoSQL or SQL)&lt;/li>
&lt;li>APIs (GraphQL and REST)&lt;/li>
&lt;li>Business Logic via Cloud Code Functions&lt;/li>
&lt;li>User authentication&lt;/li>
&lt;li>Social Integration (Facebook, LinkedIn, Twitter, etc.)&lt;/li>
&lt;li>Email Verification&lt;/li>
&lt;li>Push Notifications&lt;/li>
&lt;li>Geolocation&lt;/li>
&lt;li>Database Graphical User Interface (GUI)&lt;/li>
&lt;li>Logs&lt;/li>
&lt;li>CDN and Cache&lt;/li>
&lt;li>Infrastructure (Security settings, auto-scaling, data backup, DB optimization)&lt;/li>
&lt;/ul>
&lt;h2 id="how-does-a-baas-architecture-look-like">How does a BaaS architecture look like?&lt;/h2>
&lt;p>Generally speaking, a mobile backend as a service architecture is divided into three different layers.&lt;/p>
&lt;p>The first layer is the foundation and contains the database servers. A database cluster will have at least two servers to replicate data and a backup routine to retrieve data.&lt;/p>
&lt;p>The second layer is the application cluster and contains multiple servers to process requests. The quantity of servers fluctuates throughout the time of the day, and auto-scaling procedures are necessary to fulfill the group with the correct amount of servers.&lt;/p>
&lt;p>The third layer connects the application servers to the Internet, and it’s composed of load balancers and CDNs.&lt;/p>
&lt;p>&lt;img src="images/2.png" alt="2">&lt;/p>
&lt;h2 id="what-types-of-projects-run-best-on-a-backend-as-a-service">What types of projects run best on a Backend as a Service?&lt;/h2>
&lt;ul>
&lt;li>Real-time applications (chat, messaging apps)&lt;/li>
&lt;li>Transportation apps (similar to Uber)&lt;/li>
&lt;li>Social-network type apps&lt;/li>
&lt;li>Ecommerce apps&lt;/li>
&lt;li>Music or Video streaming apps&lt;/li>
&lt;li>Games&lt;/li>
&lt;/ul>
&lt;h2 id="baas-providers-and-features">BaaS Providers and features&lt;/h2>
&lt;p>Refer to &lt;a href="https://blog.back4app.com/backend-as-a-service-baas/">https://blog.back4app.com/backend-as-a-service-baas/&lt;/a>&lt;/p>
&lt;h3 id="baas-providers-comparison">BaaS Providers Comparison&lt;/h3>
&lt;p>&lt;img src="images/3.png" alt="">&lt;/p>
&lt;p>&lt;img src="images/4.png" alt="4">&lt;/p>
&lt;p>&lt;img src="images/5.png" alt="5">&lt;/p>
&lt;p>&lt;img src="images/6.png" alt="6">&lt;/p></description></item></channel></rss>